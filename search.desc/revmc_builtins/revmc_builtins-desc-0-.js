searchState.loadedDescShard("revmc_builtins", 0, "revmc-builtins\nBuiltins that can be called by the compiled functions.\nBuiltin cache.\n<code>CALL</code>.\n<code>EXTCALL</code>.\n<code>CALLCODE</code>.\nThe kind of a <code>*CALL*</code> instruction.\n<code>CREATE</code>.\n<code>CREATE2</code>.\nThe kind of a <code>CREATE*</code> instruction.\n<code>DELEGATECALL</code>.\n<code>EXTDELEGATECALL</code>.\nThe result of a <code>EXT*CALL</code> instruction if the gas limit is …\nThe kind of a <code>EXT*CALL</code> instruction.\n<code>STATICCALL</code>.\n<code>EXTSTATICCALL</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas calculation utilities.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the state of gas during execution.\nEIP-3860 : Limit and meter initcode\nEIP-1884: Repricing for trie-size-dependent opcodes\nInit and floor gas from transaction\nThe cost of a non-zero byte in calldata.\nThe cost of a non-zero byte in calldata adjusted by …\nThe multiplier for a non zero byte in calldata.\nThe multiplier for a non zero byte in calldata adjusted by …\nThe standard cost of calldata token.\nCalculate the transaction cost floor as specified in …\nInitial gas that is deducted for transaction to be …\nCalculate call gas cost for the call instruction.\nCalculate the cost of buffer per word.\n<code>CREATE2</code> opcode cost calculation.\n<code>EXP</code> opcode cost calculation.\n<code>KECCAK256</code> opcode cost calculation.\n<code>LOG</code> opcode cost calculation.\n<code>*COPY</code> opcodes cost calculation.\nErases a gas cost from the totals.\n<code>EXP</code> opcode cost calculation.\n<code>EXTCODECOPY</code> opcode cost calculation.\nIf transaction is a Call and Prague is enabled floor_gas …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the total number of tokens in calldata.\nEIP-3860: Limit and meter initcode\nInitial gas for transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>KECCAK256</code> opcode cost calculation.\nReturns the gas limit.\n<code>LOG</code> opcode cost calculation.\nMemory expansion cost calculation for a given number of …\nMemory expansion cost calculation for a given memory …\nCreates a new <code>Gas</code> struct with the given gas limit.\nCreates a new <code>Gas</code> struct with the given gas limit, but …\nRecords an explicit cost.\nRecords a refund value.\nReturns the total amount of gas that was refunded.\nReturns the amount of gas remaining.\nReturn remaining gas after subtracting 63/64 parts.\n<code>SELFDESTRUCT</code> opcode cost calculation.\nSet a refund value for final refund.\nSet a refund value. This overrides the current refund …\nSet a spent value. This overrides the current spent value.\n<code>SLOAD</code> opcode cost calculation.\nSpends all remaining gas.\nReturns the total amount of gas spent.\nReturns the total amount of gas spent, minus the refunded …\n<code>SSTORE</code> opcode cost calculation.\n<code>SSTORE</code> opcode refund calculation.\n<code>const</code> Option <code>?</code>.\n<code>*COPY</code> opcodes cost calculation.\nBerlin warm and cold storage access cost for account …\nBerlin warm and cold storage access cost for account …\nBuiltins that can be called by the compiled functions.\nBuiltin cache.\nClear the cache.\nGet the function for the given builtin.\nCreate a new cache.\nSame as <code>read_words_rev</code>, but returns the arguments in the …\nSplits the stack pointer into <code>N</code> elements by casting it to …")