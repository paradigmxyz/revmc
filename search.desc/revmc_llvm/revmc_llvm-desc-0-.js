searchState.loadedDescShard("revmc_llvm", 0, "revmc-llvm\nA <code>Context</code> is a container for all LLVM entities including …\nThe LLVM-based EVM bytecode compiler backend.\nThe LLVM-based EVM bytecode compiler function builder.\nCached target information for the host machine.\nAppend a named <code>BasicBlock</code> at the end of the referenced …\nAcquires the underlying raw pointer belonging to this …\nGets the <code>IntType</code> representing 1 bit width. It will be …\nCreates a const string which may be null terminated.\nCreates a constant <code>StructValue</code> from constant values.\nCreates a new <code>Context</code>.\nCreates a new <code>Builder</code> for a <code>Context</code>.\nCreates an enum <code>Attribute</code> in this <code>Context</code>.\nCreates a inline asm function pointer.\nCreates a new <code>Module</code> for a <code>Context</code>.\nCreates a new <code>Module</code> for the current <code>Context</code> from a …\nCreates a string <code>Attribute</code> in this <code>Context</code>.\nCreate an enum <code>Attribute</code> with an <code>AnyTypeEnum</code> attached to …\nGets the <code>IntType</code> representing a custom bit width. It will …\nReturns the LLVM context.\nGets the <code>FloatType</code> representing a 128 bit width. It will …\nGets the <code>FloatType</code> representing a 16 bit width. It will be …\nGets the <code>FloatType</code> representing a 32 bit width. It will be …\nGets the <code>FloatType</code> representing a 64 bit width. It will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSeparate from <code>functions</code> to have always increasing IDs.\nGets a <code>Mutex&lt;Context&gt;</code> which points to the global context …\nObtains the index of a metadata kind id. If the string …\nGets a named <code>StructType</code> from this <code>Context</code>.\nGets the <code>IntType</code> representing 128 bit width. It will be …\nGets the <code>IntType</code> representing 16 bit width. It will be …\nGets the <code>IntType</code> representing 32 bit width. It will be …\nGets the <code>IntType</code> representing 64 bit width. It will be …\nGets the <code>IntType</code> representing 8 bit width. It will be …\nAppend a named <code>BasicBlock</code> after the referenced <code>BasicBlock</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>MetadataValue</code> tuple of heterogeneous types (a “…\nCreates a <code>MetadataValue</code> string for the current context. It …\nGets the <code>MetadataType</code> representing 128 bit width. It will …\nCreates a new LLVM backend for the host machine.\nCreates a new <code>Context</code> from <code>LLVMContextRef</code>.\nCreates a new LLVM backend for the given target.\nCreates an opaque <code>StructType</code> with no type definition yet …\nSafe wrappers for LLVM ORC and LLJIT, which are not yet …\nGets the <code>FloatType</code> representing a 128 bit width. It will …\nPrepend a named <code>BasicBlock</code> before the referenced <code>BasicBlock</code>…\nGets the <code>IntType</code> representing a bit width of a pointer. It …\nGets the <code>PointerType</code>. It will be assigned the current …\nGet raw <code>LLVMContextRef</code>.\nCreates a <code>StructType</code> definition from heterogeneous types …\nGets the <code>VoidType</code>. It will be assigned the current context.\nExecutes the given closure with a thread-local LLVM …\nGets the <code>FloatType</code> representing a 80 bit width. It will be …\nLLVM diagnostic handler guard.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA custom definition generator.\nA custom materialization unit.\nDefinition generator.\nAn evaluated symbol.\nA JIT execution session reference.\nA reference to an IR transform layer.\nA JIT dynamic library reference.\n<code>LLVMOrcJITTargetMachineBuilderRef</code>, used in <code>LLJITBuilder</code>.\nAn ORC JIT.\nLazily-initialized <code>LLJIT</code> builder.\nDeallocates the vector without running the elements’ …\nAn owned materialization responsibility.\nA reference to a materialization responsibility.\nA materialization unit.\nA resource tracker.\nSymbol flags.\nA pair of a symbol name and flags.\nAn owned list of symbol flags map pairs.\nA pair of a symbol name and an evaluated symbol.\nA reference-counted unique string interned in a …\nA symbol string pool reference.\nA thread-safe LLVM context.\nA thread-safe module.\nCreate a MaterializationUnit to define the given symbols …\nCreate a MaterializationUnit to define the given symbols …\nAdd a DefinitionGenerator to the given JITDylib.\nAdd an IR module to the main JITDylib.\nAdd an IR module to the given JITDylib.\nAdd an IR module to the given ResourceTracker’s JITDylib.\nThe address of the symbol.\nConvert to a C string.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nReturns a reference to the MaterializationResponsibility.\nReturns the slice of pairs.\nBuilds the JIT.\nCreates a new LLJIT builder.\nSet the <code>Callable</code> flag.\nCalls remove on all trackers associated with this JITDylib.\nClear all unreferenced symbol string pool entries.\nCreates a new module with the given name in a new context.\nCreate a “bare” JITDylib.\nCreate a ThreadSafeModule wrapper around the given LLVM …\nCreate a JITDylib.\nCreate a ThreadSafeModule wrapper around the given LLVM …\nReturn a reference to a newly created resource tracker …\nConverts an <code>LLVMErrorRef</code> to a <code>Result</code>.\nAdd the given MaterializationUnit to the given JITDylib.\nDelegates responsibility for the given symbols to the …\nCreate a JITTargetMachineBuilder by detecting the host.\nDiscard callback.\nEmit should materialize the given IR.\nThe evaluated symbol.\nNotify all not-yet-emitted covered by this …\nThe flags of the symbol.\nThe symbol flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new EvaluatedSymbol from the given address.\nCreate a new EvaluatedSymbol from the given flags.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer. Must not be null.\nWraps a raw pointer. Must not be null.\nThe generic flags.\nGet a reference to the wrapped LLVMContext.\nReturn the data layout for this LLJIT instance.\nReturn a reference to the default resource tracker for the …\nReturns the JITDylib with the given name, if any.\nReturns the ExecutionSession for this …\nGets the execution session.\nReturns the global prefix character according to the LLJIT…\nReturns the initialization pseudo-symbol, if any.\nReturns a non-owning reference to the LLJIT instance’s …\nReturn a reference to the Main JITDylib.\nReturns the names of any symbols covered by this …\nReturns the symbol flags map for this responsibility …\nReturns the target JITDylib that these symbols are being …\nReturns the target triple for the given …\nReturn the target triple for this LLJIT instance.\nIntern a string in the ExecutionSession’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Callable</code> flag is set.\nReturns <code>true</code> if the <code>Exported</code> flag is set.\nReturns <code>true</code> if the <code>MaterializationSideEffectsOnly</code> flag is …\nReturns <code>true</code> if the <code>Weak</code> flag is set.\nLook up the given symbol in the main JITDylib of the given …\nLook up the given symbol in the main JITDylib of the given …\nMangles the given string according to the LLJIT instance’…\nSet the <code>MaterializationSideEffectsOnly</code> flag.\nMaterialize callback.\nThe symbol name.\nThe symbol name.\nCreates a new thread-safe context.\nCreate a JITTargetMachineBuilder from the given …\nCreates a new default LLJIT builder.\nCreates a new ORC JIT with a target machine for the host.\nCreate a new EvaluatedSymbol from the given address and …\nCreate a new pair.\nCreate a new pair.\nCreate a custom MaterializationUnit.\nCreates a new custom DefinitionGenerator.\nCreate a custom MaterializationUnit.\nCreates a new custom DefinitionGenerator.\nCreates a new default ORC JIT.\nCreate a new, empty SymbolFlags.\nNotifies the target JITDylib (and any pending queries on …\nNotifies the target JITDylib that the given symbols have …\nRemove all resources associated with this tracker.\nTransfers responsibility to the given MaterializationUnit …\nSet the <code>Callable</code> flag.\nSets the default error reporter to the ExecutionSession.\nAttach a custom error reporter function to the …\nSet the <code>Exported</code> flag.\nAdd a generic flag.\nSet the <code>MaterializationSideEffectsOnly</code> flag.\nAdd a target flag.\nSet the target machine builder by creating it from the …\nSet the target machine builder.\nSet the target machine builder by detecting the host.\nSets the target triple for the given …\nSet the transform function of this transform layer.\nSet the <code>Weak</code> flag.\nThe target flags.\nTransfers tracking of all resources associated with this …\nA custom generator function.\nSet the <code>Weak</code> flag.\nSet the <code>Exported</code> flag.\nAdd a generic flag.\nRuns the given closure with the module.\nAdd a target flag.")