searchState.loadedDescShard("revmc_context", 0, "revmc-context\nThe size of the stack in U256 elements.\nAn EVM bytecode function.\nThe EVM bytecode compiler runtime context.\nEVM context stack.\nA native-endian 256-bit unsigned integer, aligned to 8 …\nExtension trait for <code>Host</code>.\nThe raw function signature of a bytecode function.\nLogic for handling the <code>resume_at</code> field.\nThe size of the stack in bytes.\nThe zero value.\nReturns the stack as a byte array.\nReturns the stack as a byte array.\nReturns the stack as a mutable slice.\nReturns the stack as a slice.\nCasts this value to a <code>U256</code>. This is a no-op on …\nCasts this value to a <code>U256</code>. This is a no-op on …\nCalls the function.\nSame as <code>call</code> but with <code>#[inline(never)]</code>.\nCalls the function by re-using the interpreter’s …\nCalls the function by re-using the interpreter’s …\nContract information and call data.\nDeclare <code>RawEvmCompilerFn</code> functions in an <code>extern &quot;C&quot;</code> block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an integer from big endian to the target’s …\nCreates a new value from big-endian bytes.\nCreates a new context from an interpreter.\nCreates a stack from the interpreter’s stack. Assumes …\nCreates a new context from an interpreter.\nConverts an integer from little endian to the target’s …\nCreates a new value from little-endian bytes.\nCreates a stack from a mutable pointer.\nCreates a stack from a mutable slice.\nCreates a stack from a mutable vector’s buffer.\nCreates a new value from native-endian bytes.\nCreates a stack from a pointer.\nCreates a stack from a slice.\nConverts a <code>U256</code>.\nConverts a <code>U256</code> mutable reference to a <code>U256</code>.\nConverts a <code>U256</code> reference to a <code>U256</code>.\nCreates a stack from a vector’s buffer.\nThe function stack.\nThe gas.\nThe host.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the function.\nConverts this value to a <code>U256</code>. This is a no-op on …\nWhether the context is EOF init.\nWhether the context is static.\nThe memory.\nCreates a new EVM stack, allocated on the stack.\nWraps the function.\nCreates a vector that can be used as a stack.\nThe return action.\nThe return data.\nReverses the byte order of the integer.\nConverts this value to an <code>Address</code>.\nConverts <code>self</code> to big endian from the target’s endianness.\nReturn the memory representation of this integer as a byte …\nCreates a new interpreter by cloning the context.\nConverts <code>self</code> to little endian from the target’s …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nConverts this value to a <code>U256</code>. This is a simple copy on …")