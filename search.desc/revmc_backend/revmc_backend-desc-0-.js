searchState.loadedDescShard("revmc_backend", 0, "revmc-backend\nAn address.\nAggressive optimizations.\nFunction or parameter attribute.\nDefault optimizations.\n<code>==</code>.\nContains the error value\nCompilation error.\nAssign to the function itself.\nDetermines where on a function an attribute is assigned to.\nDefined outside of the module.\nInteger comparison condition.\nLess optimizations.\nLinkage type.\nThe host machine.\nNo optimizations.\n<code>!=</code>.\nContains the success value\nOptimization level.\nAssign to one of the function’s params (0-indexed).\nA pointer to a value.\nThe base of a pointer. Either an address or a stack slot.\nDefined in the module, but not visible outside.\nDefined in the module and visible outside.\nCompilation result.\nAssign to the function’s return type.\nSize of the return type in bytes.\nSigned <code>&gt;</code>.\nSigned <code>&gt;=</code>.\nSigned <code>&lt;</code>.\nSigned <code>&lt;=</code>.\nA stack slot.\nTail call kind.\nTarget machine.\nLLVM-style target triple.\nUnsigned <code>&gt;</code>.\nUnsigned <code>&gt;=</code>.\nUnsigned <code>&lt;</code>.\nUnsigned <code>&lt;=</code>.\nAdds a function to the module that’s located at <code>address</code>.\nAdds an attribute to a function, one of its parameters, or …\nThe base of the pointer. Either an address or a stack slot.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSign-extends negative values to <code>ty</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Some(is_value_compile_time)</code>, or <code>None</code> if …\nThe type of the pointee.\nThe target CPU.\nThe target features string.\nThe target triple.\nAn address.\nA pointer to a value.\nThe base of a pointer. Either an address or a stack slot.\nA stack slot.\nGets the address of the pointer.\nThe base of the pointer. Either an address or a stack slot.\nConverts the pointer to an address.\nConverts the pointer to a stack slot.\nReturns <code>true</code> if the pointer is an address.\nReturns <code>true</code> if the pointer is a stack slot.\nLoads the value from the pointer.\nCreates a new address pointer.\nCreates a new stack-allocated pointer.\nStores the value to the pointer.\nStores the value to the pointer.\nThe type of the pointee.\nAggressive optimizations.\nFunction or parameter attribute.\nDefault optimizations.\n<code>==</code>.\nAssign to the function itself.\nDetermines where on a function an attribute is assigned to.\nDefined outside of the module.\nInteger comparison condition.\nLess optimizations.\nLinkage type.\nThe host machine.\nNo optimizations.\n<code>!=</code>.\nOptimization level.\nAssign to one of the function’s params (0-indexed).\nDefined in the module, but not visible outside.\nDefined in the module and visible outside.\nAssign to the function’s return type.\nSize of the return type in bytes.\nSigned <code>&gt;</code>.\nSigned <code>&gt;=</code>.\nSigned <code>&lt;</code>.\nSigned <code>&lt;=</code>.\nTail call kind.\nTarget machine.\nLLVM-style target triple.\nUnsigned <code>&gt;</code>.\nUnsigned <code>&gt;=</code>.\nUnsigned <code>&lt;</code>.\nUnsigned <code>&lt;=</code>.\nAdds a function to the module that’s located at <code>address</code>.\nAdds an attribute to a function, one of its parameters, or …\nSign-extends negative values to <code>ty</code>.\nReturns <code>Some(is_value_compile_time)</code>, or <code>None</code> if …\nCreates a target from a triple string.\nCreates a target from a triple string.\nThe target CPU.\nThe target features string.\nThe target triple.")