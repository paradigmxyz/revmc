searchState.loadedDescShard("revmc", 8, "Returns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform a depth-first traversal over the given function.\nConstruct a new depth-first traversal.\nPerform a post-order traversal over the given function.\nPerform a pre-order traversal over the given function.\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nA verifier error.\nList of verifier errors.\nResult of a verification operation.\nResult of a step in the verification process.\nReturn a <code>VerifierStepResult</code> that is fatal if at least one …\nOptionally provide some context for the given location; …\nReport a fatal error and return <code>Err</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn whether one or more errors were reported.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether no errors were reported.\nThe entity causing the verifier error.\nThe error message.\nReturn a new <code>VerifierErrors</code> struct.\nReport a non-fatal error and return <code>Ok</code>.\nReport an error, adding it to the list of errors.\nVerify <code>func</code> after checking the integrity of associated …\nVerify <code>func</code>.\nA <code>FuncWriter</code> used to decorate functions during printing.\nA <code>PlainWriter</code> that doesn’t decorate the function.\nWrites <code>func</code> to <code>w</code> as text. write_function_plain is passed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefault impl of <code>write_entity_definition</code>\nDefault impl of <code>write_preamble</code>\nWrite out the basic block header, outdented:\nWrite the basic block header for the current function.\nWrite an entity definition defined in the preamble to <code>w</code>.\nWrite <code>func</code> to <code>w</code> as equivalent text. Use <code>isa</code> to emit …\nWrite the given <code>inst</code> to <code>w</code>.\nWrite the operands of <code>inst</code> to <code>w</code> with a prepended space.\nWrite the preamble to <code>w</code>. By default, this uses …\nA builder for <code>JITModule</code>.\nA <code>JITModule</code> implements <code>Module</code> and emits code and data into …\nVersion number of this crate.\nFinalize all functions and data objects that are defined …\nFree memory allocated for code and data segments of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the address and size of a finalized data object.\nReturns the address of a finalized function.\nEnable or disable hotswap support. See …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>JITBuilder</code>.\nCreate a new <code>JITModule</code>.\nAllow a single future <code>define_function</code> on a previously …\nReturns the given function’s entry in the Global Offset …\nDefine a symbol in the internal symbol table.\nAdd a symbol lookup fn.\nDefine multiple symbols in the internal symbol table.\nCreate a new <code>JITBuilder</code> with the given flags.\nCreate a new <code>JITBuilder</code> with an arbitrary target. This is …\nMemory allocation failure from a backend\nWraps a generic error from a backend\nInitialize the data with the specified contents.\nWraps a <code>cranelift-codegen</code> error\nWhen it’s a DataId\nInformation about a data object which can be accessed.\nA description of a data object.\nA data object identifier for use in the <code>Module</code> interface.\nIndicates an identifier was defined more than once\nContains the error value\nDefined inside the module, and visible outside it.\nWraps an error from a flag definition.\nWhen it’s a FuncId\nA function identifier for use in the <code>Module</code> interface.\nA declared name may refer to either a function or data …\nInformation about a function which can be called.\nA offset inside a function\nDefined inside the module, visible inside the current …\nDefined outside of a module.\nIndicates an identifier was used as data/function first, …\nIndicates a function identifier was declared with a …\nThis specifies how data is to be initialized.\nIndicates an identifier was defined, but was declared as …\nSymbols known to the linker.\nCall into a library function.\nLinkage refers to where an entity is defined and who can …\nDefined inside the module, but not visible outside it.\nA <code>Module</code> is a utility for collecting functions and data …\nThis provides a view to the state of a module which allows …\nError messages for all <code>Module</code> methods\nA module relocation.\nA translated <code>ExternalName</code> into something global we can …\nA convenient alias for a <code>Result</code> that uses <code>ModuleError</code> as …\nContains the success value\nDefined inside the module, visible outside it, and may be …\nRecord of the arguments cranelift passes to <code>TrapSink::trap</code>.\nIndicates an identifier was used before it was declared\nThis indicates that no initialization has been specified …\nUser defined function, converted from <code>ExternalName::User</code>.\nVersion number of this crate.\nInitialize the data with all zeros.\nThe addend to add to the symbol value.\nAlignment in bytes. <code>None</code> means that the default alignment …\nAn iterator over all relocations of the data object.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nClear all data structures in this <code>DataDescription</code>.\nClear the given <code>Context</code> and reset it for use with a new …\nClear the given <code>Signature</code> and reset for use with a new …\nTrap code, as determined by cranelift.\nObject file section\nExternal data object declarations.\nData addresses to write at specified offsets.\nGet all declarations in this module.\nDeclare an anonymous data object in this module.\nDeclare an anonymous data object in this module.\nDeclare an anonymous function in this module.\nDeclare an anonymous function in this module.\nDeclare a data object in this module.\nDeclare a data object in this module.\nTODO: Same as above.\nUse this when you’re building the IR of a function to …\nTODO: Same as above.\nUse this when you’re building the IR of a function to …\nDeclare a function in this module.\nDeclare a function in this module.\nDefault names for ir::LibCalls. A function by this name is …\nDefine an object initialized with the given contents.\nDefine a data object, producing the data contents from the …\nDefine a function, producing the function body from the …\nDefine a function, taking the function body from the given …\nDefine a function, producing the function body from the …\nDefine a zero-initialized object with the given size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nConverts a <code>FinalizedMachReloc</code> produced from a <code>Function</code> …\nGet the <code>FuncId</code> for the function named by <code>name</code>.\nGet the <code>DataId</code> for the data object named by <code>name</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nExternal function declarations.\nFunction addresses to write at specified offsets.\nGet the <code>DataDeclaration</code> for the data object named by <code>name</code>.\nGet an iterator of all data declarations\nGet the <code>FunctionDeclaration</code> for the function named by <code>name</code>.\nGet an iterator of all function declarations\nGet the module identifier for a given name, if that name …\nGet the module identifier for a given name, if that name …\nDeclare an external function import.\nDeclares a global value import.\nHow the data should be initialized.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest whether this linkage can have a definition.\nTest whether this linkage will have a definition that …\nReturn whether <code>name</code> names a function, rather than a data …\nReturn the <code>TargetIsa</code> to compile for.\nThe kind of relocation.\nThe linkage name of the function.\nThe linkage name of the data object.\nCreate a new <code>Context</code> initialized for use with this <code>Module</code>.\nCreate a new empty <code>Signature</code> with the default calling …\nThe external symbol / name to which this relocation refers.\nAllocate a new <code>DataDescription</code>.\nThe offset at which the relocation applies, <em>relative to the</em>\nOffset into function.\nSet the alignment for data. The alignment must be a power …\nOverride the segment/section for data, only supported on …\nReturn the size of the data to be initialized.\nSource location given to cranelift.\nReturn the target information needed by frontends to …\nCreates a user-defined external name.\nWrite the address of <code>data</code> into the data at offset <code>offset</code>.\nWrite the address of <code>func</code> into the data at offset <code>offset</code>.\nThe contents, which also implies the size of the data.\nThe size of the data.\nIo error the allocation failed with\nTell where the allocation came from\nArbitrary.\nArbitrary.\nVersion number of this crate.\nReturn an <code>isa</code> builder configured for the current host …\nReturn an <code>isa</code> builder configured for the current host …\nReturn an <code>isa</code> builder configured for the current host …\nIterator of a chain of source errors.\nProvides the <code>wrap_err</code> method for <code>Result</code>.\nProvides the <code>context</code> method for <code>Option</code> when porting from …\nThe default provided error report handler for <code>eyre::Report</code>.\nThe default provided error report handler for <code>eyre::Report</code>.\nContains the error value\nThe core error reporting type of the library, a wrapper …\nThe core error reporting type of the library, a wrapper …\nError Report Handler trait for customizing <code>eyre::Report</code>\nError Report Handler trait for customizing <code>eyre::Report</code>\nError indicating that <code>set_hook</code> was unable to install the …\nEquivalent to Ok::&lt;_, eyre::Error&gt;(value).\nContains the success value\nProvides the <code>ok_or_eyre</code> method for <code>Option</code>.\nThe core error reporting type of the library, a wrapper …\ntype alias for <code>Result&lt;T, Report&gt;</code>\nProvides the <code>wrap_err</code> method for <code>Result</code>.\nConstruct an ad-hoc error from a string.\nReturn early with an error.\nAn iterator of the chain of source errors contained by …\nCompatibility re-export of wrap_err for interop with <code>anyhow</code>\nCompatibility re-export of wrap_err for interop with <code>anyhow</code>\nCompatibility version of <code>wrap_err</code> for creating new errors …\nDefine the report format\nDefine the report format\nManual hook which constructs <code>DefaultHandler</code>s.\nOverride for the <code>Display</code> format\nOverride for the <code>Display</code> format\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nReturn early with an error if a condition is not satisfied.\nConstruct an ad-hoc error from a string.\nConstruct an ad-hoc error from a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the Handler for this Report.\nGet a mutable reference to the Handler for this Report.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>E</code> is the type held by this error object.\nCreate a new error object from a printable error message.\nCreate a new error object from any error type.\nConstruct an iterator over a chain of errors via the <code>source</code>…\nTransform the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …\nThe lowest level cause of this error — this error’s …\nInstall the provided error hook for constructing …\nStore the location of the caller who constructed this …\nStore the location of the caller who constructed this …\nCompatibility re-export of wrap_err_with for interop with …\nCompatibility re-export of wrap_err_with for interop with …\nCompatibility version of <code>wrap_err_with</code> for creating new …\nWrap the error value with a new adhoc error\nWrap the error value with a new adhoc error\nCompatibility re-export of <code>context</code> for porting from <code>anyhow</code> …\nCreate a new error from an error message to wrap the …\nWrap the error value with a new adhoc error that is …\nWrap the error value with a new adhoc error that is …\nCompatibility re-export of <code>with_context</code> for porting from …\nEVM bytecode compiler linker.\nSets the C compiler to use for linking. Default: “cc”.\nSets the C compiler flags to use for linking.\nLinks the given object files into a shared library at the …\nSets the linker to use for linking. Default: <code>lld</code>.\nCreates a new linker.\nA <code>Context</code> is a container for all LLVM entities including …\nThe LLVM-based EVM bytecode compiler backend.\nThe LLVM-based EVM bytecode compiler function builder.\nAppend a named <code>BasicBlock</code> at the end of the referenced …\nAcquires the underlying raw pointer belonging to this …\nGets the <code>IntType</code> representing 1 bit width. It will be …\nCreates a const string which may be null terminated.\nCreates a constant <code>StructValue</code> from constant values.\nCreates a new <code>Context</code>.\nCreates a new <code>Builder</code> for a <code>Context</code>.\nCreates an enum <code>Attribute</code> in this <code>Context</code>.\nCreates a inline asm function pointer.\nCreates a new <code>Module</code> for a <code>Context</code>.\nCreates a new <code>Module</code> for the current <code>Context</code> from a …\nCreates a string <code>Attribute</code> in this <code>Context</code>.\nCreate an enum <code>Attribute</code> with an <code>AnyTypeEnum</code> attached to …\nGets the <code>IntType</code> representing a custom bit width. It will …\nReturns the LLVM context.\nGets the <code>FloatType</code> representing a 128 bit width. It will …\nGets the <code>FloatType</code> representing a 16 bit width. It will be …\nGets the <code>FloatType</code> representing a 32 bit width. It will be …\nGets the <code>FloatType</code> representing a 64 bit width. It will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a <code>Mutex&lt;Context&gt;</code> which points to the global context …\nObtains the index of a metadata kind id. If the string …\nGets a named <code>StructType</code> from this <code>Context</code>.\nGets the <code>IntType</code> representing 128 bit width. It will be …\nGets the <code>IntType</code> representing 16 bit width. It will be …\nGets the <code>IntType</code> representing 32 bit width. It will be …\nGets the <code>IntType</code> representing 64 bit width. It will be …\nGets the <code>IntType</code> representing 8 bit width. It will be …\nAppend a named <code>BasicBlock</code> after the referenced <code>BasicBlock</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>MetadataValue</code> tuple of heterogeneous types (a “…\nCreates a <code>MetadataValue</code> string for the current context. It …\nGets the <code>MetadataType</code> representing 128 bit width. It will …\nCreates a new LLVM backend for the host machine.\nCreates a new <code>Context</code> from <code>LLVMContextRef</code>.\nCreates a new LLVM backend for the given target.\nCreates an opaque <code>StructType</code> with no type definition yet …\nSafe wrappers for LLVM ORC and LLJIT, which are not yet …\nGets the <code>FloatType</code> representing a 128 bit width. It will …\nPrepend a named <code>BasicBlock</code> before the referenced <code>BasicBlock</code>…\nGets the <code>IntType</code> representing a bit width of a pointer. It …\nGets the <code>PointerType</code>. It will be assigned the current …\nGet raw <code>LLVMContextRef</code>.\nCreates a <code>StructType</code> definition from heterogeneous types …\nGets the <code>VoidType</code>. It will be assigned the current context.\nExecutes the given closure with a thread-local LLVM …\nGets the <code>FloatType</code> representing a 80 bit width. It will be …\nAdds to the value in memory and returns the prior value.\nDefines the address space in which a global will be …\nBitwise and into memory and returns the prior value.\nEqual\nAdds to the float-typed value in memory and returns the …\nSets memory to the greater of the two float-typed values, …\nSets memory to the lesser of the two float-typed values, …\nSubtract a float-typed value off the value in memory and …\nDefines how to compare a <code>left</code> and <code>right</code> <code>FloatValue</code>.\nThis enum defines how to compare a <code>left</code> and <code>right</code> <code>IntValue</code>.\nSets memory to the signed-greater of the value provided …\nSets memory to the signed-lesser of the value provided and …\nNot Equal\nBitwise nands into memory and returns the prior value.\nReturns true if <code>left</code> == <code>right</code> and neither are NaN\nReturns true if <code>left</code> &gt;= <code>right</code> and neither are NaN\nReturns true if <code>left</code> &gt; <code>right</code> and neither are NaN\nReturns true if <code>left</code> &lt;= <code>right</code> and neither are NaN\nReturns true if <code>left</code> &lt; <code>right</code> and neither are NaN\nReturns true if <code>left</code> != <code>right</code> and neither are NaN\nReturns true if neither value is NaN\nDefines the optimization level used to compile a <code>Module</code>.\nBitwise ors into memory and returns the prior value.\nAlways returns false\nAlways returns true\nSigned Greater Than or Equal\nSigned Greater Than\nSigned Less Than or Equal\nSigned Less Than\nSubtract a value off the value in memory and returns the …\nReturns true if <code>left</code> == <code>right</code> or either is NaN\nUnsigned Greater Than or Equal\nReturns true if <code>left</code> &gt;= <code>right</code> or either is NaN\nUnsigned Greater Than\nReturns true if <code>left</code> &gt; <code>right</code> or either is NaN\nUnsigned Less Than or Equal\nReturns true if <code>left</code> &lt;= <code>right</code> or either is NaN\nUnsigned Less Than\nReturns true if <code>left</code> &lt; <code>right</code> or either is NaN\nSets memory to the unsigned-greater of the value provided …\nSets memory to the unsigned-lesser of the value provided …\nReturns true if <code>left</code> != <code>right</code> or either is NaN\nReturns true if either value is NaN\nStores to memory and returns the prior value.\nBitwise xors into memory and returns the prior value.\n<code>Attribute</code>s are optional modifiers to functions, function …\nA <code>BasicBlock</code> is a container of instructions.\nA <code>Builder</code> enables you to build instructions.\nA <code>Comdat</code> helps resolve linker errors for duplicate …\nA <code>Context</code> is an opaque owner and manager of core global …\nDebug symbols - <code>DebugInfoBuilder</code> interface\nReturns the default value for <code>OptimizationLevel</code>, namely …\nReturns the default value for <code>GlobalVisibility</code>, namely …\nReturns the default value for <code>DLLStorageClass</code>, namely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>Module</code> represents a single code compilation unit.\nA type is a classification which determines how data is …\nA value is an instance of a type.\nFunctions, function parameters, and return types can have …\nAn <code>AttributeLoc</code> determines where on a function an …\nAssign to the <code>FunctionValue</code> itself.\nAssign to one of the <code>FunctionValue</code>’s params (0-indexed).\nAssign to the <code>FunctionValue</code>’s return type.\nAcquires the underlying raw pointer belonging to this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the kind id associated with an enum <code>Attribute</code>.\nGets the value associated with an enum <code>Attribute</code>.\nGets the last enum kind id associated with builtin names.\nGets the enum kind id associated with a builtin name.\nGets the string kind id associated with a string attribute.\nGets the string value associated with a string attribute.\nGets the type associated with a type attribute.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether or not an <code>Attribute</code> is an enum. This …\nDetermines whether or not an <code>Attribute</code> is a string. This …\nDetermines whether or not an <code>Attribute</code> is a type …\nCreates a new <code>Attribute</code> from a raw pointer.\nA <code>BasicBlock</code> is a container of instructions.\nIterate over all <code>InstructionValue</code>s in a basic block.\nAcquires the underlying raw pointer belonging to this …\nRemoves this <code>BasicBlock</code> completely from memory. This is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the address of this <code>BasicBlock</code> if possible. Returns …\nObtains the <code>ContextRef</code> this <code>BasicBlock</code> belongs to.\nObtains the first <code>InstructionValue</code> in this <code>BasicBlock</code>, if …\nGets the first use of this <code>BasicBlock</code> if any.\nPerforms a linear lookup to obtain a instruction based on …\nGet an instruction iterator\nObtains the last <code>InstructionValue</code> in this <code>BasicBlock</code>, if …\nGets the name of a <code>BasicBlock</code>.\nGets the <code>BasicBlock</code> succeeding the current one, in its own …\nObtains the <code>FunctionValue</code> that this <code>BasicBlock</code> belongs to, …\nGets the <code>BasicBlock</code> preceding the current one, in its own …\nObtains the terminating <code>InstructionValue</code> in this <code>BasicBlock</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAppends one <code>BasicBlock</code> after another. It returns <code>Err(())</code> …\nPrepends one <code>BasicBlock</code> before another. It returns <code>Err(())</code> …\nRemoves this <code>BasicBlock</code> from its parent <code>FunctionValue</code>. It …\nReplaces all uses of this basic block with another.\nSet name of the <code>BasicBlock</code>.\nAll <code>build_*</code> methods return a <code>Result&lt;_, BuilderError&gt;</code> type …\nErrors that can be generated by the Builder. All <code>build_*</code> …\nAcquires the underlying raw pointer belonging to this …\nBuilds a function return instruction for a return type …\nReturns <code>Err(BuilderError::AlignmentError)</code> if the type is …\nBuilds an atomicrmw instruction. It allows you to …\nBuilds a bitcast instruction. A bitcast reinterprets the …\nBuilds a function call instruction. Alias for …\nBuilds a cmpxchg instruction. It allows you to atomically …\nBuilds a function call instruction. The function being …\nBuilds an extract element instruction which extracts a …\nBuilds an extract value instruction which extracts a …\nGEP is very likely to segfault if indexes are used …\nGEP is very likely to segfault if indexes are used …\nCall a function pointer. Because a pointer does not carry …\nBuilds an insert element instruction which inserts a …\nBuilds an insert value instruction which inserts a …\nLike <code>build_int_cast</code>, but respects the signedness of the …\nAn invoke is similar to a normal function call, but used to\nLanding pads are places where control flow jumps to if a …\nBuilds an <code>IntValue</code> containing the result of a logical left …\nBuilds a load2 instruction. It allows you to retrieve a …\nReturns <code>Err(BuilderError::AlignmentError)</code> if the type is …\nBuild a memcpy instruction.\nBuild a memmove instruction.\nBuild a memset instruction.\nBuilds an instruction which calculates the difference of …\nResume propagation of an existing (in-flight) exception …\nBuilds a function return instruction. It should be …\nBuilds an <code>IntValue</code> containing the result of a right shift …\nBuilds a store instruction. It allows you to store a value …\nBuilds a GEP instruction on a struct pointer. Returns <code>Err</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the debug info source location of the instruction …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the position of the builder to after an instruction.\nSet the position of the builder to the end of a basic …\nSet the position of the builder to before an instruction.\nSet the debug info source location of the instruction …\nUnset the debug info source location of the instruction …\nThe linker may choose any COMDAT.\nA <code>Comdat</code> determines how to resolve duplicate sections when …\nDetermines how linker conflicts are to be resolved.\nThe data referenced by the COMDAT must be the same.\nThe linker will choose the largest COMDAT.\nNo other Module may specify this COMDAT.\nThe data referenced by the COMDAT must be the same size.\nAcquires the underlying raw pointer belonging to this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets what kind of <code>Comdat</code> this is.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Comdat</code> type from a raw pointer.\nSets what kind of <code>Comdat</code> this should be.\nThis trait abstracts an LLVM <code>Context</code> type and should be …\nA <code>Context</code> is a container for all LLVM entities including …\nA <code>ContextRef</code> is a smart pointer allowing borrowed access …\nAppend a named <code>BasicBlock</code> at the end of the referenced …\nReturns the internal LLVM reference behind the type\nAcquires the underlying raw pointer belonging to this …\nGets the <code>IntType</code> representing 1 bit width. It will be …\nCreates a const string which may be null terminated.\nCreates a constant <code>StructValue</code> from constant values.\nCreates a new <code>Builder</code> for a <code>Context</code>.\nCreates an enum <code>Attribute</code> in this <code>Context</code>.\nCreates a inline asm function pointer.\nCreates a new <code>Module</code> for a <code>Context</code>.\nCreates a new <code>Module</code> for the current <code>Context</code> from a …\nCreates a string <code>Attribute</code> in this <code>Context</code>.\nCreate an enum <code>Attribute</code> with an <code>AnyTypeEnum</code> attached to …\nGets the <code>IntType</code> representing a custom bit width. It will …\nGets the <code>FloatType</code> representing a 128 bit width. It will …\nGets the <code>FloatType</code> representing a 16 bit width. It will be …\nGets the <code>FloatType</code> representing a 32 bit width. It will be …\nGets the <code>FloatType</code> representing a 64 bit width. It will be …\nReturns the argument unchanged.\nObtains the index of a metadata kind id. If the string …\nGets a named <code>StructType</code> from this <code>Context</code>.\nGets the <code>IntType</code> representing 128 bit width. It will be …\nGets the <code>IntType</code> representing 16 bit width. It will be …\nGets the <code>IntType</code> representing 32 bit width. It will be …\nGets the <code>IntType</code> representing 64 bit width. It will be …\nGets the <code>IntType</code> representing 8 bit width. It will be …\nAppend a named <code>BasicBlock</code> after the referenced <code>BasicBlock</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>MetadataValue</code> tuple of heterogeneous types (a “…\nCreates a <code>MetadataValue</code> string for the current context. It …\nGets the <code>MetadataType</code> representing 128 bit width. It will …\nCreates a new <code>ContextRef</code> from <code>LLVMContextRef</code>.\nCreates an opaque <code>StructType</code> with no type definition yet …\nGets the <code>FloatType</code> representing a 128 bit width. It will …\nPrepend a named <code>BasicBlock</code> before the referenced <code>BasicBlock</code>…\nGets the <code>IntType</code> representing a bit width of a pointer. It …\nGets the <code>PointerType</code>. It will be assigned the current …\nGet raw <code>LLVMContextRef</code>.\nCreates a <code>StructType</code> definition from heterogeneous types …\nGets the <code>VoidType</code>. It will be assigned the current context.\nGets the <code>FloatType</code> representing a 80 bit width. It will be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpecific scopes (i.e. <code>DILexicalBlock</code>) can be turned into a …\nA primitive debug info type created by <code>create_basic_type</code> …\nCompilation unit scope for debug info\nA wrapper around an array of types, such as a union or …\nA wrapper around a single type, such as a typedef or …\nhttps://llvm.org/docs/LangRef.html#diexpression\nSource file scope for debug info\nLexical block scope for debug info\nMetadata representing a variable inside a scope\nA debug location within the source code. Contains the …\nNamespace scope for debug info\nAny kind of debug information scope (i.e. visibility of a …\nFunction body scope for debug info\nMetadata representing the type of a function\nAny kind of debug info type\nThe amount of debug information to emit. Corresponds to …\nSource languages known by DWARF. Corresponds to …\nA builder object to create debug info metadata. Used along …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nCreates an array type\nCreate local automatic storage variable.\nCreate a primitive basic type. <code>encoding</code> is an unsigned int …\nCreate a debug location.\nCreate an expression\nCreate a file scope.\nA DIFunction provides an anchor for all debugging …\nCreate a lexical block scope.\nCreate a type for a non-static member.\nCreate function parameter variable.\nConstruct a placeholders derived type to be used when …\nCreates a pointer type\nCreates a pointer type\nCreate a struct type.\nCreate a function type\nCreate a typedef (alias) of <code>ditype</code>\nCreate union type of multiple types.\nGets the version of debug metadata produced by the current …\nConstruct any deferred debug info descriptors. May …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a new llvm.dbg.value intrinsic call before an …\nInsert a variable declaration (<code>llvm.dbg.declare</code> intrinsic) …\nInsert a variable declaration (<code>llvm.dbg.declare</code>) before a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeletes a placeholder, replacing all uses of it with …\nA reference-counted wrapper around LLVM’s execution …\nA wrapper around a function pointer which ensures the …\nMarker trait representing an unsafe function pointer (…\nMaps the specified value to an address.\nAdds a module to an <code>ExecutionEngine</code>.\nAcquires the underlying raw pointer belonging to this …\nReturns the raw function pointer. This function is unsafe …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to load a function from the execution engine.\nAttempts to look up a function’s address by its name. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the raw function pointer, consuming self in the …\nThis function probably doesn’t need to be called, but is …\nThis function probably doesn’t need to be called, but is …\nFind llvm intrinsic id from name\nReturns the argument unchanged.\nCreate or insert the declaration of an intrinsic.\nCalls <code>U::from(self)</code>.\nCheck if specified intrinsic is overloaded\nEither LLVMAttributeReturnIndex, …\nFlags to indicate what fast-math-style optimizations are …\nAddress of the GV is globally insignificant.\nAddress of the GV is locally insignificant.\nAppends the two values, which are required to be metadata …\nAppends the two values, which are required to be metadata …\nEmits an error if two values disagree, otherwise the …\nUses the specified value, regardless of the behavior or …\nAdds a requirement that another module flag be present and …\nEmits a warning if two values disagree. The result value …\nAddress of the GV is significant.\nTail call kind for LLVMSetTailCallKind and …\nNo value.\nNo value.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nVarious analyses of the LLVM IR.\nInput of the LLVM bitcode format.\nOutput of the LLVM bitcode format.\nLLVM’s BLAKE3 implementation. Original BLAKE3 C API: …\nCOMDAT\nThe LLVM intermediate representation.\nGeneration of DWARF debug info.\nA disassembler library.\nRuntime code generation and execution.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IR reader\nThe module/file/archive linker\nAbstract link time optimization.\nObject file reading and writing\nOrcV2\nCore types used throughout LLVM.\nRemark diagnostics library.\nTarget information\nTarget machine information, to generate assembly or object …\nPrint to stderr and abort the process.\nPrint to stderr and return 1.\nReturn 1 and print nothing.\nVerify that a single function is valid, taking the …\nVerify that a module is valid, taking the specified action …\nOpen a ghostview window displaying the CFG of the given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRead a module from the specified path.\nRead a module from the specified path, returning a module …\nRead a module from the specified path, returning a module …\nBuild a module from the bitcode in the specified memory …\nBuild a module from the bitcode in the specified memory …\nWrite a module to an open file descriptor.\nWrite a module to the specified path.\nDeprecated: use LLVMWriteBitcodeToFD\nWrites a module to a new memory buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe linker may choose any COMDAT.\nThe data referenced by the COMDAT must be the same.\nGet the Comdat assigned to the given global object.\nGet the conflict resolution selection kind for the Comdat.\nReturn the Comdat in the module with the specified name. …\nThe linker will choose the largest COMDAT.\nNo deduplication is performed.\nThe data referenced by the COMDAT must be the same size.\nAssign the Comdat to the given global object.\nSet the conflict resolution selection kind for the Comdat.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdd a case to a <code>switch</code> instruction\nAdd a catch or filter clause to a <code>landingpad</code> instruction\nAdd a destination to an <code>indirectbr</code> instruction\nAdd a global indirect function to a module under a …\nAdd a destination to the catchswitch instruction\nAdds the metadata registered with the given builder to the …\nAdd a module-level flag to the module-level flags metadata …\nRetrieve the target value of an alias.\nSet the target value of an alias.\nAppend the given basic block to the basic block list of …\nCreate a fixed size array type that refers to a specific …\nGet the dafult floating-point math metadata for a given …\nSet the default floating-point math metadata for the given …\nCheck if a given value can potentially have fast math …\nCreate a ConstantArray from values.\nGet the diagnostic context of this context.\nGet the diagnostic handler of this context.\nReturns the module flags as an array of flag-key-value …\nCreate an enum attribute.\nCreate a new operand bundle.\nCreate a string attribute.\nCreate a type attribute.\nRemove the given instruction that is not inserted into a …\nDestroys module flags metadata entries.\nDestroy an operand bundle.\nRemove a global indirect function from its parent module …\nGet the number of funcletpad arguments.\nObtain the length of an array type.\nGet the string name of a basic block.\nGet a pointer to the function invoked by this instruction.\nGet the value of the clause with the given index on a …\nGet location information used by debugging information.\nObtain the data layout for a module.\nGet the unique id corresponding to the provided enum …\nReturn a unique id given the name of an enum attribute, or …\nGet the value of an enum attribute.\nGet the flags for which fast-math-style optimizations are …\nObtain an iterator to the first GlobalAlias in a Module.\nObtain an iterator to the first GlobalIFunc in a Module.\nGet the source element type of the given GEP operator.\nRetrieves the resolver function associated with this …\nObtain the basic blocks acting as handlers for a …\nGet the template string used for an inline assembly …\nGet if the inline asm snippet may unwind the stack\nGet the raw constraint string for an inline assembly …\nGet the dialect used by the inline asm snippet.\nGet the function type of the inline assembly snippet.\nGet if the inline asm snippet has side effects\nGet if the inline asm snippet needs an aligned stack\nObtain the ID number from a function instance.\nGets whether the instruction has the disjoint flag set.\nObtain an iterator to the last GlobalAlias in a Module.\nObtain an iterator to the last GlobalIFunc in a Module.\nObtain the underlying string from a MDString value.\nAdd a module-level flag to the module-level flags metadata …\nGet the identifier of a module.\nGets if the instruction has the non-negative flag set.\nObtain a GlobalAlias value from a Module by its name.\nObtain a GlobalIFunc value from a Module by its name.\nAdvance a GlobalAlias iterator to the next GlobalAlias.\nAdvance a GlobalIFunc iterator to the next GlobalIFunc.\nReturn the normal destination basic block of an invoke …\nGet the number of clauses on a landingpad instruction.\nReturn the number of types in the derived type.\nGet the number of handlers on the catchswitch instruction\nGet the number of indices on an ExtractValue, InsertValue …\nObtain the number of operands for an operand bundle.\nGet the number of operand bundles attached to this …\nObtain the operand for an operand bundle at the given …\nGet the operand bundle attached to this instruction at the …\nObtain the tag of an operand bundle as a string.\nGet the parent catchswitch instruction of a catchpad …\nObtain the personality function attached to the function.\nObtain a constant value referring to a poison value of a …\nDecrement a GlobalAlias iterator to the previous …\nDecrement a GlobalIFunc iterator to the previous …\nObtain the module’s original source file name.\nGet a string attribute’s kind.\nGet a string attribute’s value.\nGet the subtypes of the given type.\nGet the type attribute’s value.\nObtain a Type from a context by its registered name.\nReturn the unwind destination basic block.\nObtain the (possibly scalable) number of elements in a …\nCheck whether the given function has a personality …\nInsert the given basic block after the insertion point of …\nRemove the given instruction from its containing building …\nRemove the given instruction from its containing building …\nGet the cleanup flag in a landingpad instruction.\nDetermine whether the specified value instance is constant.\nDetermine whether a structure is packed.\nDetermine whether a value instance is poisonous.\nGet whether a call instruction is a tail call.\nObtain the intrinsic ID number which matches the given …\nCreate an MDNode value with the given array of operands.\nCreate an MDString value from a given string value.\nObtain Metadata as a Value.\nReturns the flag behavior for a module flag entry at a …\nReturns the key for a module flag entry at a specific …\nReturns the metadata for a module flag entry at a specific …\nCreate an opaque pointer type in a context.\nDetermine whether a pointer is opaque.\nRemove a global indirect function from its parent module.\nReplace an operand at a specific index in a llvm::MDNode …\nCreate a vector type that contains a defined type and has …\nSet a funcletpad argument at the given index.\nSet the cleanup flag in a <code>landingpad</code> instruction.\nSet location information used by debugging information.\nSets the flags for which fast-math-style optimizations are …\nSets the resolver function associated with this indirect …\nAttempts to set the debug location for the given …\nSets the disjoint flag for the instruction.\nSet the given GEP instruction to be inbounds or not.\nSet the identifier of a module.\nSets the non-negative flag for the instruction.\nSet the normal destination basic block.\nSet the parent catchswitch instruction of a catchpad …\nSet the personality function attached to the function.\nSet the original source file name of a module to a string …\nSet the unwind destination basic block.\nDeprecated: LLVM threading is configured at compile-time …\nDeprecated: LLVM threading is configured at compile-time …\nGet the type of the element at the given index in a …\nObtain a Value as Metadata.\nConstruct a builder for a module and collect unresolved …\nConstruct a builder for a module, do not allow unresolved …\nCreate debugging information entry for an array.\nCreate a uniqued DIType* clone with FlagArtificial set.\nCreate a new descriptor for a local auto variable.\nCreate debugging information entry for a basic type.\nCreate debugging information entry for a bit field member.\nCreate debugging information entry for a class.\nCreate a new descriptor for the specified variable that …\nCreates a new DebugLocation that describes a source …\nCreate debugging information entry for an enumeration.\nCreate debugging information entry for an enumerator.\nCreate a new descriptor for the specified variable which …\nCreate a file descriptor to hold debugging information for …\nCreate a permanent forward-declared type.\nCreate a new descriptor for the specified subprogram.\nCreate a new descriptor for the specified variable.\nCreate a descriptor for an imported function, type, or …\nCreate a descriptor for an imported module that aliases …\nCreate a descriptor for an imported module.\nCreate a descriptor for an imported namespace. Suitable …\nCreate debugging information entry to establish …\nCreate a descriptor for a lexical block with the specified …\nCreate a descriptor for a lexical block with a new file …\nCreate debugging information entry for a pointer to member.\nCreate debugging information entry for a member.\nCreates a new descriptor for a module with the specified …\nCreates a new descriptor for a namespace with the …\nCreate C++11 nullptr type.\nCreate debugging information entry for Objective-C …\nCreate debugging information entry for Objective-C …\nCreate a uniqued DIType* clone with FlagObjectPointer and …\nCreate a new descriptor for a function parameter variable.\nCreate debugging information entry for a pointer.\nCreate debugging information entry for a qualified type, …\nCreate debugging information entry for a c++ style …\nCreate a temporary forward-declared type.\nCreate debugging information entry for a C++ static data …\nCreate debugging information entry for a struct.\nCreate subroutine type.\nCreate a new descriptor for the specified global variable …\nCreate debugging information entry for a typedef.\nCreate debugging information entry for a union.\nCreate a DWARF unspecified type.\nCreate debugging information entry for a vector type.\nConstruct any deferred debug info descriptors.\nFinalize a specific subprogram. No new variables may be …\nCreate an array of DI Nodes.\nCreate a descriptor for a value range.\nCreate a type array.\nInsert a new llvm.dbg.value intrinsic call at the end of …\nInsert a new llvm.dbg.value intrinsic call before the …\nInsert a new llvm.dbg.declare intrinsic call at the end of …\nInsert a new llvm.dbg.declare intrinsic call before the …\nGet the directory of a given file.\nGet the name of a given file.\nGet the source of a given file.\nRetrieves the DIExpression associated with this global …\nRetrieves the DIVariable associated with this global …\nGet the column number of this debug location.\nGet the “inline at” location associated with this …\nGet the line number of this debug location.\nGet the local scope associated with this debug location.\nGet the metadata of the file associated with a given scope.\nGet the line associated with a given subprogram.\nGet the alignment of this DIType in bits.\nGet the flags associated with this DIType.\nGet the source line where this DIType is declared.\nGet the name of this DIType.\nGet the offset of this DIType in bits.\nGet the size of this DIType in bits.\nGet the metadata of the file associated with a given …\nGet the source line where this \\c DIVariable is declared.\nGet the metadata of the scope associated with a given …\nThe amount of debug information to emit.\nSource languages known by DWARF.\nThe current debug metadata version number.\nDeallocate a builder and everything it owns.\nDeallocate a temporary node.\nGet the dwarf::Tag of a DINode\nObtain the enumerated type of a metadata instance.\nThe version of debug metadata that’s present in the …\nGet the metadata of the subprogram attached to a function.\nGet the debug location for the given instruction.\nSet the debug location for the given instruction.\nReplace all uses of temporary metadata.\nSet the subprogram attached to a function.\nStrip debug info in the module if it exists.\nCreate a new temporary \\c MDNode.  Suitable for use in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe option use the other assembler printer variant\nThe option to print immediates as hex.\nThe option to print latency information alongside …\nThe option to set comment on instructions\nThe option to produce marked up assembly.\nThe output reference is to a C++ symbol name.\nNo input reference type or no output reference type.\nThe input reference is from an ARM64::ADDXri instruction.\nThe input reference is from an ARM64::ADR instruction.\nThe input reference is from an ARM64::ADRP instruction.\nThe input reference is from an ARM64::LDRXl instruction.\nThe input reference is from an ARM64::LDRXui instruction.\nThe input reference is from a branch instruction.\nThe input reference is from a PC relative load instruction.\nThe output reference is to a cstring address in a literal …\nThe output reference is to a symbol address in a literal …\nThe output reference is to a Objective-C CoreFoundation …\nThe output reference is to a Objective-C class ref.\nThe output reference is to a Objective-C message.\nThe output reference is to a Objective-C message ref.\nThe output reference is to a Objective-C selector ref.\nThe output reference is to as symbol stub.\nSymbol name if not NULL.\nNo value.\nNo value.\n1 if this symbol is present.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSymbol value if name is NULL.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a StringError.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnable LLVM’s build-in stack trace code.\nInstall a fatal error handler.\nReset fatal error handling to the default.\nNo value.\nSome value of type <code>T</code>.\nCreate an MCJIT execution engine for a module, with the …\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead LLVM IR from a memory buffer and convert it to an …\nLink the source module into the destination module.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nType to wrap a single object returned by ThinLTO.\nAdded in LLVM 3.7.\nAdded in LLVM 3.7.\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the runtime API version.\nGenerates code for the optimized merged module into one …\nRuns optimization for the merged module.\nSets the object module for code gneeration. This will …\nSet whether to embed uselists in bitcode.\nSets if we should run the internalize pass during …\nCreate an LTO input file from a buffer.\nFree all memory allocated by the input file.\nGet the <code>i</code>th dependent library specifier for the given …\nGet the number of dependent library specifiers for the …\nReturns the module’s linker options.\nReturn true if the module has either the <code>@llvm.global_ctors</code>…\nReturn true if <code>Buffer</code> contains a bitcode file with ObjC …\nChecks if a buffer is a loadable object file.\nTest if a module has ThinLTO linking support.\nReturn the list of libcall symbols that can be generated …\nAdd a symbol to the list of global symbols that are …\nAdd a module to a code generator.\nAdd a symbol to the list of global symbols that must exist …\nDisable code generation (running all stages until codegen).\nFrees a code generator.\nOptimize and codegen all modules attached to the code …\nSet the expiration (in seconds) for cache entries.\nSet the cache pruning interval, in seconds.\nSet the maximum size of the cache directory (in bytes). A …\nSets the maximum number of files in the cache directory. …\nSame as thinlto_codegen_set_cache_size_bytes, except the …\nPerform codegen only; disable all other stages.\nSet the CPU to generate code for.\nSet the maximum cache size to persist across builds.\nSet which PIC code model to generate.\nSet the path to a directory to use as temporary bitcode …\nInstantiates a ThinLTO code generator.\nParse -mllvm style debug options.\nReturn the number of object files produced by the code …\nReturn the number of object files produced by the code …\nReturn a reference to the <code>index</code>th object file produced by …\nReturn the path to the ith output object file.\nSet the path to a directory to save generated object files.\nArchive file\nCOFF Object file\nCOFF Import file\nELF 32-bit, big endian\nELF 32-bit, little endian\nELF 64-bit, big endian\nELF 64-bit, little endian\nLLVM IR\nMachO 32-bit, big endian\nMachO 32-bit, little endian\nMachO 64-bit, big endian\nMachO 64-bit, little endian\nMach-O Universal Binary file\nOffloading fatbinary\nWeb assembly\nWindows resource (.res) file\nCreate a binary file from the given memory buffer.\nDispose of a binary file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn evaluated symbol address and flags.\nLinkage flags for a symbol definition.\nGeneric linkage flags for a symbol definition.\nTarget specific flags for a symbol definition.\nA JITDylib search order.\nAn element type for a JITDylib search order.\nA set of symbols to look up / generate.\nAn element type for a symbol lookup set.\nA pair of a symbol name and LLVMJITSymbolFlags.\nA pair of a symbol name and an evaluated symbol.\nA list of (SymbolStringPtr, JITEvaluatedSymbol) pairs that …\nDisposer for a custom generator.\nError reporter function.\nRepresents an address in the executor process\nJITDylib lookup flags. This can be used by definition …\nRepresents an address in the executor process.\nLookup kind. This can be used by definition generators …\nSymbol lookup flags for lookup sets.\nA reference to an orc::SymbolStringPool.\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstall the plugin that submits debug objects to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the debug location that is attached to the value …\nReturns the key of an argument. The key defines what the …\nReturns the value of an argument. This is a string that …\nElement of the “Args” list. The key might give more …\nReturn the column in the source file for a debug location.\nReturn the path to the source file for a debug location.\nReturn the line in the source file for a debug location.\nDebugLoc containing File, Line and Column.\nFree the resources used by the remark entry.\nReturns the debug location that is attached to this remark.\nGet a new iterator to iterate over a remark’s argument.\nGet the name of the function being processed when the …\nReturn the hotness of the remark.\nGet the next argument in Remark from the position of It.\nThe number of arguments the remark holds.\nGet the name of the pass that emitted this remark.\nGet an identifier of the remark.\nThe type of the remark. For example, it can allow users to …\nA remark emitted by the compiler.\nCreates a remark parser that can be used to parse the …\nReturns a null-terminated string containing an error …\nReturns the next remark in the file.\nReturns <code>1</code> if the parser encountered an error while parsing …\nReturns the buffer holding the string.\nReturns the size of the string.\nString containing a buffer and a length. The buffer is not …\nReturns the version of the remarks library.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPermanently add the named symbol with the provided value.\nSearch all previously loaded dynamic libraries for the …\nCreate target data from a target layout string.\nGet the data layout for a module.\nSet the data layout for a module.\nReturns 1 on failure.\nReturns 1 on failure.\nReturns 1 on failure.\nReturns 1 on failure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a DataLayout based on the target machine.\nCreate a new set of options for an llvm::TargetMachine.\nDispose of an LLVMTargetMachineOptionsRef instance.\nGet the host CPU’s features as a string. The result …\nGet the host CPU as a string. The result needs to be …\nNormalize a target triple. The result needs to be disposed …\nEnable fast-path instruction selection.\nEnable global instruction selection.\nSet abort behaviour when global instruction selection …\nEnable the MachineOutliner pass.\nSet the list of features for the target machine.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets a byte slice of this <code>MemoryBuffer</code>.\nThis function is likely slightly cheaper than …\nThis will create a new <code>MemoryBuffer</code> from the given input.\nConvert this <code>MemoryBuffer</code> into an <code>ObjectFile</code>. LLVM does …\nReturns the argument unchanged.\nGets the byte size of this <code>MemoryBuffer</code>.\nCalls <code>U::from(self)</code>.\nAppends the two values, which are required to be metadata …\nAppends the two values, which are required to be metadata …\n<code>Appending</code> linkage may only be applied to global variables …\nGlobals with <code>AvailableExternally</code> linkage are never emitted …\n<code>Common</code> linkage is most similar to “weak” linkage, but …\n<code>DLLExport</code> causes the compiler to provide a global pointer …\n<code>DLLImport</code> causes the compiler to reference a function or …\nEmits an error if two values disagree, otherwise the …\nIf none of the other identifiers are used, the global is …\nThe semantics of this linkage follow the ELF object file …\nDefines the operational behavior for a module wide flag. …\nIterate over all <code>FunctionValue</code>s in an llvm module\nFIXME: Unknown linkage type\nIterate over all <code>GlobalValue</code>s in an llvm module\nSimilar to private, but the value shows as a local symbol …\nGlobals with <code>LinkOnceAny</code> linkage are merged with other …\nSome languages allow differing globals to be merged, such …\nFIXME: Unknown linkage type\nThis enum defines how to link a global variable or …\nFIXME: Unknown linkage type\nFIXME: Unknown linkage type\nRepresents a reference to an LLVM <code>Module</code>. The underlying …\nUses the specified value, regardless of the behavior or …\nGlobal values with <code>Private</code> linkage are only directly …\nAdds a requirement that another module flag be present and …\nEmits a warning if two values disagree. The result value …\n<code>WeakAny</code> linkage has the same merging semantics as linkonce …\nSome languages allow differing globals to be merged, such …\nAppend a <code>BasicValue</code> as a module wide flag. Note that using …\nCreates a function given its <code>name</code> and <code>ty</code>, adds it to the …\nCreates a <code>GlobalValue</code> based on a type in an address space.\nAppends a <code>MetaDataValue</code> to a global list indexed by a …\nAppend a <code>MetadataValue</code> as a module wide flag. Note that …\nAcquires the underlying raw pointer belonging to this …\nCreates a <code>DebugInfoBuilder</code> for this <code>Module</code>.\nCreates an <code>ExecutionEngine</code> from this <code>Module</code>.\nCreates an interpreter <code>ExecutionEngine</code> from this <code>Module</code>.\nCreates a JIT <code>ExecutionEngine</code> from this <code>Module</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the <code>Context</code> from which this <code>Module</code> originates.\nGets a smart pointer to the <code>DataLayout</code> belonging to a …\nGets the version of debug metadata contained in this <code>Module</code>…\nGets the first <code>FunctionValue</code> defined in this <code>Module</code>.\nGets the first <code>GlobalValue</code> in a module.\nGets the <code>MetadataValue</code> flag associated with the key in …\nGets a <code>FunctionValue</code> defined in this <code>Module</code> by its name.\nAn iterator over the functions in this <code>Module</code>.\nGets a named <code>GlobalValue</code> in a module.\nObtains the global <code>MetaDataValue</code> node indexed by key, …\nObtains the number of <code>MetaDataValue</code>s indexed by a …\nAn iterator over the globals in this <code>Module</code>.\nGets the last <code>FunctionValue</code> defined in this <code>Module</code>.\nGets the last <code>GlobalValue</code> in a module.\nGets the name of this <code>Module</code>.\nGets the <code>Comdat</code> associated with a particular name. If it …\nGets the source file name. It defaults to the module …\nGets a named <code>StructType</code> from this <code>Module</code>’s <code>Context</code>.\nGets the <code>TargetTriple</code> assigned to this <code>Module</code>. If none has …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinks one module into another. This will merge two <code>Module</code>s …\nGet a module from an LLVMModuleRef.\nCreates a new <code>Module</code> from a <code>MemoryBuffer</code> with bitcode.\nA convenience function for creating a <code>Module</code> from a …\nPrints the content of the <code>Module</code> to a file.\nPrints the content of the <code>Module</code> to stderr.\nPrints the content of the <code>Module</code> to an <code>LLVMString</code>.\nConstruct and run a set of passes over a module. This …\nSets the <code>DataLayout</code> for a particular <code>Module</code>.\nSets the inline assembly for the <code>Module</code>.\nAssigns the name of this <code>Module</code>.\nSets the source file name. It defaults to the module …\nAssigns a <code>TargetTriple</code> to this <code>Module</code>.\nStrips and debug info from the module, if it exists.\nPrints the content of the <code>Module</code> to a <code>String</code>.\nEnsures that the current <code>Module</code> is valid, and returns a …\n<code>write_bitcode_to_path</code> should be preferred over this …\nWrites this <code>Module</code> to a <code>MemoryBuffer</code>.\nWrites a <code>Module</code> to a <code>Path</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA manager for running optimization and simplification …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nCreate a new set of options for a PassBuilder\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis method returns true if any of the passes modified the …\nToggle debug logging when running the PassBuilder.\nToggle adding the VerifierPass for the PassBuilder, …\nAn owned LLVM String. Also known as a LLVM Message\nPossible errors that can occur when loading a library\nThe given path could not be loaded as a library\nThe given path could not be converted to a <code>&amp;str</code>\nThis module contains some supplemental functions for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the major, minor, and patch version of the LLVM in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether or not LLVM has been configured to run …\nPermanently load the dynamic library at the given <code>path</code>.\nPermanently loads all the symbols visible inside the …\nSearch through all previously loaded dynamic libraries for …\nThis function is very unsafe. Any reference to LLVM data …\nThis is a convenience method for creating a Rust <code>String</code>, …\nInstalls an error handler to be called before LLVM exits.\nResets LLVM’s fatal error handler back to the default\nLLVM target machine options provide another way to create …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nCreate a target machine from given TargetMachineOptions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the default triple for the current system.\nGets a comma separated list of supported features by the …\nGets a string containing the host CPU’s name (triple).\nCreate TargetData from this target machine\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the <code>IntType</code> representing a bit width of a pointer. It …\nSaves a <code>TargetMachine</code> to a file.\nWrites a <code>TargetMachine</code> to a <code>MemoryBuffer</code>.\nAlphanumeric, 0-9 and all 26 letters in upper or lowercase.\nRepresents any LLVM type.\nA wrapper for any <code>BasicType</code>, <code>VoidType</code>, or <code>FunctionType</code>.\nAn <code>ArrayType</code> is the type of contiguous constants or …\nA contiguous homogeneous container type.\nA contiguous homogeneous container type.\nAccessor to the inner LLVM type reference\nRepresents a basic LLVM type, that may be used in …\nA wrapper for any <code>BasicType</code>.\nBinary 0 or 1\nDecimal 0-9\nIterate over all <code>BasicTypeEnum</code>s in a struct.\nRepresents an LLVM type that can have floating point math …\nA <code>FloatType</code> is the type of a floating point constant or …\nA floating point type.\nA floating point type.\nA <code>FunctionType</code> is the type of a function variable.\nA function return and parameter definition.\nHexadecimal with upper or lowercase letters up to F.\nRepresents an LLVM type that can have integer math …\nAn <code>IntType</code> is the type of an integer constant or variable.\nAn integer type.\nAn integer type.\nThe type for int to float or int vector to float vector …\nThe type for float to int or float vector to int vector …\nA <code>MetadataType</code> is the type of a metadata.\nOctal 0-7\nRepresents an LLVM type that can have pointer operations …\nA <code>PointerType</code> is the type of a pointer constant or …\nA pointer type.\nA pointer type.\nThe type for int to pointer or int vector to pointer …\nThe type for pointer to int or pointer vector to int …\nHow to interpret a string or digits used to construct an …\nA <code>StructType</code> is the type of a heterogeneous container of …\nA contiguous heterogeneous container type.\nA contiguous heterogeneous container type.\nThe value instance of an int or int vector type.\nThe value instance of a float or float vector type.\nThe value instance of a pointer type.\nA <code>VectorType</code> is the type of a multiple value SIMD constant …\nA contiguous homogeneous “SIMD” container type.\nA contiguous homogeneous “SIMD” container type.\nA <code>VoidType</code> is a special type with no possible direct …\nA valueless type.\nCreate an <code>ArrayType</code> with this <code>BasicType</code> as its elements.\nCreates an <code>ArrayType</code> with this <code>ArrayType</code> for its element …\nCreates an <code>ArrayType</code> with this <code>FloatType</code> for its element …\nCreates an <code>ArrayType</code> with this <code>IntType</code> for its element …\nCreates an <code>ArrayType</code> with this <code>PointerType</code> for its element …\nCreates an <code>ArrayType</code> with this <code>StructType</code> for its element …\nCreates an <code>ArrayType</code> with this <code>VectorType</code> for its element …\nReturns an <code>AnyTypeEnum</code> that represents the current type.\nReturns a <code>BasicTypeEnum</code> that represents the current type.\nReturns the internal LLVM reference behind the type\nCreates an <code>IntValue</code> representing a constant value of all …\nCreates a constant <code>ArrayValue</code> of <code>ArrayValue</code>s.\nCreates a constant <code>ArrayValue</code>.\nCreates a constant <code>ArrayValue</code>.\nCreates a constant <code>ArrayValue</code>.\nCreates a constant <code>ArrayValue</code>.\nCreates a constant <code>ArrayValue</code>.\nCreates a <code>FloatValue</code> representing a constant value of this …\nCreate a <code>FloatValue</code> from a string. This function is marked …\nCreates an <code>IntValue</code> representing a constant value of this …\nCreate a constant <code>IntValue</code> of arbitrary precision.\nCreate an <code>IntValue</code> from a string and radix. LLVM provides …\nCreates a <code>StructValue</code> based on this <code>StructType</code>’s …\nCreates a null <code>PointerValue</code> of this <code>PointerType</code>. It will …\nCreates a constant <code>VectorValue</code>.\nCreates a constant zero value of this <code>ArrayType</code>.\nCreates a constant <code>BasicValueZero</code>.\nCreates a constant zero value of this <code>FloatType</code>.\nCreates a constant zero value of this <code>IntType</code>.\nCreates a constant null value of this <code>PointerType</code>. This is …\nCreates a constant zero value of this <code>StructType</code>.\nCreates a constant zero value of this <code>VectorType</code>.\nCounts the number of field types.\nCounts the number of param types this <code>FunctionType</code> has.\nCreates a <code>GenericValue</code> for use with <code>ExecutionEngine</code>s.\nCreates a <code>GenericValue</code> for use with <code>ExecutionEngine</code>s.\nCreate a <code>FunctionType</code> with this <code>BasicType</code> as its return …\nCreates a <code>FunctionType</code> with this <code>ArrayType</code> for its return …\nCreates a <code>FunctionType</code> with this <code>FloatType</code> for its return …\nCreates a <code>FunctionType</code> with this <code>IntType</code> for its return …\nCreates a <code>FunctionType</code> with this <code>MetadataType</code> for its …\nCreates a <code>FunctionType</code> with this <code>PointerType</code> for its …\nCreates a <code>FunctionType</code> with this <code>StructType</code> for its return …\nCreates a <code>FunctionType</code> with this <code>VectorType</code> for its return …\nCreates a <code>FunctionType</code> with this <code>VoidType</code> for its return …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the <code>AddressSpace</code> a <code>PointerType</code> was created with.\nGets the alignment of this <code>ArrayType</code>. Value may vary …\nGets the alignment of this <code>FloatType</code>. Value may vary …\nGets the alignment of this <code>IntType</code>. Value may vary …\nGets the alignment of this <code>PointerType</code>. Value may vary …\nGets the alignment of this <code>StructType</code>. Value may vary …\nGets the alignment of this <code>VectorType</code>. Value may vary …\nGets the bit width of an <code>IntType</code>.\nGets a reference to the <code>Context</code> this <code>ArrayType</code> was created …\nGets a reference to the <code>Context</code> this <code>FloatType</code> was created …\nGets a reference to the <code>Context</code> this <code>FunctionType</code> was …\nGets a reference to the <code>Context</code> this <code>IntType</code> was created …\nGets a reference to the <code>Context</code> this <code>MetadataType</code> was …\nGets a reference to the <code>Context</code> this <code>PointerType</code> was …\nGets a reference to the <code>Context</code> this <code>StructType</code> was …\nGets a reference to the <code>Context</code> this <code>VectorType</code> was …\nGets a reference to the <code>Context</code> this <code>VoidType</code> was created …\nGets the element type of this <code>ArrayType</code>.\nGets the element type of this <code>VectorType</code>.\nGets the type of a field belonging to this <code>StructType</code>.\nGets the type of a field belonging to this <code>StructType</code>.\nGets this <code>StructType</code>’s field types.\nGet a struct field iterator.\nGets this <code>StructType</code>’s name.\nGets param types this <code>FunctionType</code> has.\nCreates a poison instance of a <code>ArrayType</code>.\nCreates a poison instance of a <code>FloatType</code>.\nCreates a poison instance of an <code>IntType</code>.\nCreates a poison instance of a <code>PointerType</code>.\nCreates a poison instance of a <code>StructType</code>.\nCreates a poison instance of a <code>VectorType</code>.\nGets the return type of this <code>FunctionType</code>.\nGets the size of this <code>VectorType</code>.\nCreates an undefined instance of a <code>ArrayType</code>.\nCreates an undefined instance of a <code>FloatType</code>.\nCreates an undefined instance of an <code>IntType</code>.\nCreates an undefined instance of a <code>PointerType</code>.\nCreates an undefined instance of a <code>StructType</code>.\nCreates an undefined instance of a <code>VectorType</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this <code>ArrayType</code> contains no elements.\nDetermine whether this pointer is opaque.\nDetermines whether or not a <code>StructType</code> is opaque.\nDetermines whether or not a <code>StructType</code> is packed.\nDetermines whether or not this <code>BasicType</code> is sized or not. …\nGets whether or not this <code>FunctionType</code> is sized or not. …\nGets whether or not this <code>VoidType</code> is sized or not. This …\nDetermines whether or not a <code>FunctionType</code> is a variadic …\nGets the length of this <code>ArrayType</code>.\nIs the string valid for the given radix?\nCreate <code>ArrayType</code> from <code>LLVMTypeRef</code>\nCreate <code>AnyTypeEnum</code> from <code>LLVMTypeRef</code>\nCreate <code>BasicTypeEnum</code> from <code>LLVMTypeRef</code>\nCreate <code>FloatType</code> from <code>LLVMTypeRef</code>\nCreate <code>FunctionType</code> from <code>LLVMTypeRef</code>\nCreate <code>IntType</code> from <code>LLVMTypeRef</code>\nCreate <code>MetadataType</code> from <code>LLVMTypeRef</code>\nCreate <code>PointerType</code> from <code>LLVMTypeRef</code>\nCreate <code>StructType</code> from <code>LLVMTypeRef</code>\nCreate <code>VectorType</code> from <code>LLVMTypeRef</code>\nCreate <code>VoidType</code> from <code>LLVMTypeRef</code>\nPrints the definition of a Type to a <code>LLVMString</code>.\nPrint the definition of an <code>ArrayType</code> to <code>LLVMString</code>\nPrint the definition of a <code>AnyTypeEnum</code> to <code>LLVMString</code>.\nPrint the definition of a <code>BasicTypeEnum</code> to <code>LLVMString</code>.\nPrint the definition of a <code>BasicMetadataTypeEnum</code> to …\nPrint the definition of a <code>FloatType</code> to <code>LLVMString</code>.\nPrint the definition of a <code>FunctionType</code> to <code>LLVMString</code>.\nPrint the definition of an <code>IntType</code> to <code>LLVMString</code>.\nPrint the definition of a <code>MetadataType</code> to <code>LLVMString</code>.\nPrint the definition of a <code>PointerType</code> to <code>LLVMString</code>.\nPrint the definition of a <code>StructType</code> to <code>LLVMString</code>.\nPrint the definition of a <code>VectorType</code> to <code>LLVMString</code>.\nPrint the definition of a <code>VoidType</code> to <code>LLVMString</code>.\nCreate a <code>PointerType</code> that points to this <code>BasicType</code>.\nCreates a <code>PointerType</code> with this <code>ArrayType</code> for its element …\nCreates a <code>PointerType</code> with this <code>FloatType</code> for its element …\nCreates a <code>PointerType</code> with this <code>FunctionType</code> for its …\nCreates a <code>PointerType</code> with this <code>IntType</code> for its element …\nCreates a <code>PointerType</code> with this <code>PointerType</code> for its …\nCreates a <code>PointerType</code> with this <code>StructType</code> for its element …\nCreates a <code>PointerType</code> with this <code>VectorType</code> for its element …\nDefines the body of a <code>StructType</code>.\nGets the size of this <code>BasicType</code>. Value may vary depending …\nGets the size of this <code>ArrayType</code>. Value may vary depending …\nGets the size of this <code>FloatType</code>. Value may vary depending …\nGets the size of this <code>IntType</code>. Value may vary depending on …\nGets the size of this <code>PointerType</code>. Value may vary …\nGets the size of this <code>StructType</code>. Value may vary depending …\nGets the size of this <code>VectorType</code>. Value may vary depending …\nCreates a <code>VectorType</code> with this <code>FloatType</code> for its element …\nCreates a <code>VectorType</code> with this <code>IntType</code> for its element …\nCreates a <code>VectorType</code> with this <code>PointerType</code> for its element …\nRepresents an aggregate value, built on top of other …\nDefines any struct wrapping an LLVM value.\nAn <code>ArrayValue</code> is a block of contiguous constants or …\nRepresents a basic value, which can be used both by …\nA usage of a <code>BasicValue</code> in another value.\nA value resulting from a function call. It may have …\nValue returned by <code>Context::get_kind_id()</code> for the first …\nIterate over all the field values of this struct.\nRepresents a value which is permitted in floating point …\nAddress of the <code>GlobalValue</code> is globally insignificant.\nIterate over all the incoming edges of a phi value.\nRepresents a value which is permitted in integer math …\nTail call kind for LLVMSetTailCallKind and …\nAddress of the <code>GlobalValue</code> is locally insignificant.\nAddress of the <code>GlobalValue</code> is significant.\nIterate over all the operands of an instruction value.\nIterate over all the operands of an instruction value.\nA Phi Instruction returns a value based on which basic …\nThis enum determines the significance of a <code>GlobalValue</code>’s …\nAdds an <code>Attribute</code> to this <code>CallSiteValue</code>.\nAdds an <code>Attribute</code> to a particular location in this …\nReturns an enum containing a typed version of the …\nReturns an enum containing a typed version of <code>AnyValue</code>.\nReturns an enum containing a typed version of the …\nGets the <code>GlobalValue</code> version of this <code>FunctionValue</code>. This …\nAttempt to convert this <code>ArrayValue</code> to an <code>InstructionValue</code>, …\nMost <code>BasicValue</code>s are the byproduct of an instruction and …\nGet all <code>Attribute</code>s on this <code>CallSiteValue</code> at an index.\nGet all <code>Attribute</code>s belonging to the specified location in …\nCheck whether this instructions supports fast math flags.\nGEP is very likely to segfault if indexes are used …\nGEP is very likely to segfault if indexes are used …\nCounts the number of arguments this <code>CallSiteValue</code> was …\nCounts the number of <code>Attribute</code>s on this <code>CallSiteValue</code> at …\nCounts the number of <code>Attribute</code>s belonging to the specified …\nCounts the number of fields.\nCreates a clone of this <code>InstructionValue</code>, and returns it. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns alignment on a memory access instruction or alloca.\nReturns the type that is allocated by the alloca …\nReturns atomic ordering on a memory access instruction.\nGets the calling convention for this <code>CallSiteValue</code>.\nGets the <code>FunctionValue</code> this <code>CallSiteValue</code> is based on.\nGets a <code>Comdat</code> assigned to this <code>GlobalValue</code>, if any.\nObtains a constant <code>FloatValue</code>’s value and whether or not …\nChecks if an <code>or</code> instruction has the <code>disjoint</code> flag set.\nGets an enum <code>Attribute</code> on this <code>CallSiteValue</code> at an index …\nGets an enum <code>Attribute</code> belonging to the specified location …\nGet fast math flags of supported instructions.\nGets the predicate of an <code>FCmp</code> <code>InstructionValue</code>. For …\nGets the value of a field belonging to this <code>StructValue</code>.\nGets the value of a field belonging to this <code>StructValue</code>.\nGet a field value iterator.\nGets the first use of an <code>InstructionValue</code> if any.\nReturns the source element type of the given GEP.\nGets the predicate of an <code>ICmp</code> <code>InstructionValue</code>. For …\nSafety\nGet an incoming edge iterator.\nGet a instruction with it’s name Compares against all …\nGets the <code>MetadataValue</code> associated with this <code>Instruction</code> at …\nGet name of the <code>ArrayValue</code>. If the value is a constant, …\nGet the name of the <code>BasicValueEnum</code>.\nGets name of the <code>FloatValue</code>. If the value is a constant, …\nGets the name of a <code>FunctionValue</code>.\nGet name of the <code>GlobalValue</code>.\nGet name of the <code>InstructionValue</code>.\nGets the name of an <code>IntValue</code>. If the value is a constant, …\nGet name of the <code>MetadataValue</code>.\nGets the name of a <code>ArrayValue</code>. If the value is a constant, …\nGet name of the <code>PointerValue</code>. If the value is a constant, …\nGets the name of a <code>StructValue</code>. If the value is a …\nGets the name of a <code>VectorValue</code>. If the value is a …\nGets the next use of a <code>BasicBlock</code>, <code>InstructionValue</code> or …\nCheck if a <code>zext</code> instruction has the non-negative flag set.\nObtains the number of operands an <code>InstructionValue</code> has. An …\nObtains the operand an <code>InstructionValue</code> has at a given …\nGet the operand of an <code>InstructionValue</code>.\nGets the use of an operand(<code>BasicValue</code>), if any.\nGets the use of an operand(<code>BasicValue</code>), if any.\nGet an instruction value operand use iterator.\nGet an instruction value operand iterator.\nGet the section to which this function belongs\nGet section, this global value belongs to\nObtains a constant <code>IntValue</code>’s sign extended value.\nGets a string <code>Attribute</code> on this <code>CallSiteValue</code> at an index …\nGets a string <code>Attribute</code> belonging to the specified …\nObtain the string from the ArrayValue if the value points …\nGet the debug info descriptor\nReturns tail, musttail, and notail attributes.\nReturns the tail call kind on call instructions.\nGets the type of this <code>ArrayValue</code>.\nGet type of the current InstructionValue\nGets the used value (a <code>BasicValueEnum</code> or <code>BasicBlock</code>) of …\nGets the user (an <code>AnyValueEnum</code>) of this use.\nReturns whether or not a memory access instruction is …\nObtains a constant <code>IntValue</code>’s zero extended value.\nDetermines whether or not this <code>Instruction</code> has any …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if a terminator is conditional or not\nDetermines whether or not an <code>ArrayValue</code> is a constant.\nDetermines whether or not a <code>FloatValue</code> is a constant.\nDetermines whether or not an <code>IntValue</code> is an <code>llvm::Constant</code>.\nDetermines whether or not a <code>PointerValue</code> is a constant.\nDetermines whether or not a <code>StructValue</code> is a constant.\nDetermines whether or not a <code>VectorValue</code> is a constant.\nDetermines whether or not an <code>ArrayValue</code> represents a …\nDetermines whether or not an <code>IntValue</code> is an …\nDetermines whether or not a <code>GlobalValue</code> is a declaration …\nDetermines whether or not this value is null.\nReturns whether the value is <code>poison</code>\nDetermines whether or not this call is a tail call.\nReturns if the instruction is a terminator\nDetermines whether or not this value is undefined.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMUseRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nCreates a new constant <code>ArrayValue</code> with the given type and …\nCreates a new constant <code>ArrayValue</code> with the given type and …\nPrints this <code>ArrayValue</code> to standard error.\nPrints a value to a <code>LLVMString</code>\nRemoves an enum <code>Attribute</code> on this <code>CallSiteValue</code> at an …\nRemoves an enum <code>Attribute</code> belonging to the specified …\nRemoves a string <code>Attribute</code> on this <code>CallSiteValue</code> at an …\nRemoves a string <code>Attribute</code> belonging to the specified …\nReplaces all uses of this value with another value of the …\nSets alignment on a memory access instruction or alloca.\nShortcut for setting the alignment <code>Attribute</code> for this …\nSets atomic ordering on a memory access instruction.\nSets the calling convention for this <code>CallSiteValue</code>.\nAssigns a <code>Comdat</code> to this <code>GlobalValue</code>.\nSet the <code>disjoint</code> flag on <code>or</code> instructions.\nSet fast math flags on supported instructions.\nSets the value of a field belonging to this <code>StructValue</code>.\nSets a metadata of the given type on the GlobalValue\nDetermines whether or not this <code>Instruction</code> has any …\nSets the name of a <code>BasicValue</code>. If the value is a constant, …\nSet name of the <code>ArrayValue</code>.\nSet name of the <code>BasicValueEnum</code>.\nSet name of the <code>FloatValue</code>.\nSet name of the <code>GlobalValue</code>.\nSet name of the <code>InstructionValue</code>.\nSet name of the <code>IntValue</code>.\nSet name of the <code>PointerValue</code>.\nGet name of the <code>StructValue</code>.\nSet name of the <code>VectorValue</code>.\nSet the non-negative flag on <code>zext</code> instructions.\nSets the operand an <code>InstructionValue</code> has at a given index …\nSet the section to which this function should belong\nSet section, this global value belongs to\nSet the debug info descriptor\nSets whether or not this call is a tail call.\nSets tail, musttail, and notail attributes.\nSets whether or not a memory access instruction is …\nTry to convert this <code>CallSiteValue</code> to a <code>BasicValueEnum</code> if …\nView the control flow graph and produce a .dot file\nOnly view the control flow graph\nA custom definition generator.\nA custom materialization unit.\nDefinition generator.\nAn evaluated symbol.\nA JIT execution session reference.\nA reference to an IR transform layer.\nA JIT dynamic library reference.\n<code>LLVMOrcJITTargetMachineBuilderRef</code>, used in <code>LLJITBuilder</code>.\nAn ORC JIT.\nLazily-initialized <code>LLJIT</code> builder.\nAn owned materialization responsibility.\nA reference to a materialization responsibility.\nA materialization unit.\nA resource tracker.\nSymbol flags.\nA pair of a symbol name and flags.\nAn owned list of symbol flags map pairs.\nA pair of a symbol name and an evaluated symbol.\nA reference-counted unique string interned in a …\nA symbol string pool reference.\nA thread-safe LLVM context.\nA thread-safe module.\nCreate a MaterializationUnit to define the given symbols …\nCreate a MaterializationUnit to define the given symbols …\nAdd a DefinitionGenerator to the given JITDylib.\nAdd an IR module to the main JITDylib.\nAdd an IR module to the given JITDylib.\nAdd an IR module to the given ResourceTracker’s JITDylib.\nThe address of the symbol.\nConvert to a C string.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nUnwraps the raw pointer.\nReturns a reference to the MaterializationResponsibility.\nReturns the slice of pairs.\nBuilds the JIT.\nCreates a new LLJIT builder.\nSet the <code>Callable</code> flag.\nCalls remove on all trackers associated with this JITDylib.\nClear all unreferenced symbol string pool entries.\nCreates a new module with the given name in a new context.\nCreate a “bare” JITDylib.\nCreate a ThreadSafeModule wrapper around the given LLVM …\nCreate a JITDylib.\nCreate a ThreadSafeModule wrapper around the given LLVM …\nReturn a reference to a newly created resource tracker …\nAdd the given MaterializationUnit to the given JITDylib.\nDelegates responsibility for the given symbols to the …\nCreate a JITTargetMachineBuilder by detecting the host.\nDiscard callback.\nEmit should materialize the given IR.\nThe evaluated symbol.\nNotify all not-yet-emitted covered by this …\nThe flags of the symbol.\nThe symbol flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new EvaluatedSymbol from the given address.\nCreate a new EvaluatedSymbol from the given flags.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer.\nWraps a raw pointer. Must not be null.\nWraps a raw pointer. Must not be null.\nThe generic flags.\nGet a reference to the wrapped LLVMContext.\nReturn the data layout for this LLJIT instance.\nReturn a reference to the default resource tracker for the …\nReturns the JITDylib with the given name, if any.\nReturns the ExecutionSession for this …\nGets the execution session.\nReturns the global prefix character according to the LLJIT…\nReturns the initialization pseudo-symbol, if any.\nReturns a non-owning reference to the LLJIT instance’s …\nReturn a reference to the Main JITDylib.\nReturns the names of any symbols covered by this …\nReturns the symbol flags map for this responsibility …\nReturns the target JITDylib that these symbols are being …\nReturns the target triple for the given …\nReturn the target triple for this LLJIT instance.\nIntern a string in the ExecutionSession’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Callable</code> flag is set.\nReturns <code>true</code> if the <code>Exported</code> flag is set.\nReturns <code>true</code> if the <code>MaterializationSideEffectsOnly</code> flag is …\nReturns <code>true</code> if the <code>Weak</code> flag is set.\nLook up the given symbol in the main JITDylib of the given …\nLook up the given symbol in the main JITDylib of the given …\nMangles the given string according to the LLJIT instance’…\nSet the <code>MaterializationSideEffectsOnly</code> flag.\nMaterialize callback.\nThe symbol name.\nThe symbol name.\nCreates a new thread-safe context.\nCreate a JITTargetMachineBuilder from the given …\nCreates a new default LLJIT builder.\nCreates a new ORC JIT with a target machine for the host.\nCreate a new EvaluatedSymbol from the given address and …\nCreate a new pair.\nCreate a new pair.\nCreate a custom MaterializationUnit.\nCreates a new custom DefinitionGenerator.\nCreate a custom MaterializationUnit.\nCreates a new custom DefinitionGenerator.\nCreates a new default ORC JIT.\nCreate a new, empty SymbolFlags.\nNotifies the target JITDylib (and any pending queries on …\nNotifies the target JITDylib that the given symbols have …\nRemove all resources associated with this tracker.\nTransfers responsibility to the given MaterializationUnit …\nSet the <code>Callable</code> flag.\nSets the default error reporter to the ExecutionSession.\nAttach a custom error reporter function to the …\nSet the <code>Exported</code> flag.\nAdd a generic flag.\nSet the <code>MaterializationSideEffectsOnly</code> flag.\nAdd a target flag.\nSet the target machine builder by creating it from the …\nSet the target machine builder.\nSet the target machine builder by detecting the host.\nSets the target triple for the given …\nSet the transform function of this transform layer.\nSet the <code>Weak</code> flag.\nThe target flags.\nTransfers tracking of all resources associated with this …\nA custom generator function.\nSet the <code>Weak</code> flag.\nSet the <code>Exported</code> flag.\nAdd a generic flag.\nRuns the given closure with the module.\nAdd a target flag.\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nThe size of this integer type in bytes. Note that some …\nError for <code>from_base_le</code> and <code>from_base_be</code>.\nError from <code>Uint::from_base_be</code>.\nA newtype wrapper around <code>Uint</code> that restricts operations to …\nError for <code>TryFrom&lt;Uint&gt;</code>.\nThe requested number base <code>.0</code> is less than two.\nThe provided digit <code>.0</code> is out of range for requested base <code>.1</code>…\nInvalid digit in string.\nInvalid radix, up to base 64 is supported.\nThe size of this integer type in 64-bit limbs.\nThe size of this integer type in 64-bit limbs.\nBit mask for the last limb.\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\n‘Not a number’ (NaN) can not be represented as Uint\nNumber is equal or larger than the target field modulus.\nThe value is too large to fit the target type.\nThe Uint value is too large for the target type.\nError for <code>from_str_radix</code>.\nError for <code>TryFrom&lt;Uint&gt;</code> for <code>ark_ff</code> and others.\nError for <code>TryFrom&lt;T&gt;</code> for <code>Uint</code>.\nThe ring of numbers modulo $2^{\\mathtt{BITS}}$.\n⚠️ Workaround for Rust issue #50133. Use <code>TryFrom</code> …\n⚠️ Workaround for Rust issue #50133. Use <code>TryFrom</code> …\nNegative values can not be represented as Uint.\nValue is too large to fit the Uint.\nThe value zero. This is the only value that exists in all …\nThe value zero. This is the only value that exists in all …\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nCompute $\\mod{\\mathtt{self} + \\mathtt{rhs}}_…\n⚠️ Collection of bignum algorithms.\nType aliases for common bit sizes of <code>Uint</code> and <code>Bits</code>.\nDouble precision logarithm.\nDouble precision decimal logarithm.\nDouble precision binary logarithm.\nConstruct from double precision binary logarithm.\nArithmetic shift right by <code>rhs</code> bits.\nSee <code>Uint::as_le_bytes</code> for documentation.\nAccess the underlying store as a little-endian bytes.\nAccess the underlying store as a little-endian bytes with …\nAccess the underlying store as a little-endian slice of …\nAccess the underlying store as a mutable little-endian …\nSee <code>Uint::as_limbs</code> for documentation.\nView the array of limbs.\nSee <code>Uint::as_limbs_mut</code> for documentation.\nAccess the array of limbs.\nReturns a reference to the inner Uint.\nReturns a mutable reference to the inner Uint.\nReturns whether a specific bit is set.\nLength of the number in bits ignoring leading zeros.\nReturns a specific byte. The byte at index <code>0</code> is the least …\nLength of the number in bytes ignoring leading zeros.\nComputes <code>self + rhs</code>, returning <code>None</code> if overflow occurred.\nComputes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>.\nConstruct a new integer from little-endian a slice of …\nReturns the logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nComputes <code>self * rhs</code>, returning <code>None</code> if overflow occurred.\nComputes <code>-self</code>, returning <code>None</code> unless <code>self == 0</code>.\nCalculates the smallest value greater than or equal to <code>self</code>…\nReturns the smallest power of two greater than or equal to …\nRaises self to the power of <code>exp</code>.\nComputes <code>self % rhs</code>, returning <code>None</code> if <code>rhs == 0</code>.\nSee <code>Uint::checked_shl</code> for documentation.\nChecked left shift by <code>rhs</code> bits.\nSee <code>Uint::checked_shr</code> for documentation.\nChecked right shift by <code>rhs</code> bits.\nComputes <code>self - rhs</code>, returning <code>None</code> if overflow occurred.\nCompile time for loops with a <code>const</code> variable for testing.\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nComputes <code>self / rhs</code> rounding up.\nComputes <code>self / rhs</code> and <code>self % rhs</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new <code>Uint</code> from the value.\nConverts a fixed byte array into a fixed-width unsigned …\nReturns the argument unchanged.\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConstructs the <code>Uint</code> from digits in the base <code>base</code> in …\nConstructs the <code>Uint</code> from digits in the base <code>base</code> in …\nSee <code>Uint::from_be_bytes</code> for documentation.\nConverts a big-endian byte array of size exactly …\nCreates a new integer from a big endian slice of bytes.\nSee <code>Uint::from_le_bytes</code> for documentation.\nConverts a little-endian byte array of size exactly …\nCreates a new integer from a little endian slice of bytes.\nSee <code>Uint::from_limbs</code> for documentation.\nConstruct a new integer from little-endian a array of …\nConstruct a new integer from little-endian a slice of …\nSee <code>Uint::from_str_radix</code> for documentation.\nParse a string into a <code>Uint</code>.\nCompute the greatest common divisor of two <code>Uint</code>s.\n⚠️ Compute the greatest common divisor and the Bézout …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner Uint.\nConvert to a array of limbs.\nCompute $\\mod{\\mathtt{self}^{-1}}_{\\mathtt{modulus}}$.\nComputes the inverse modulo $2^{\\mathtt{BITS}}$ of <code>self</code>, …\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns true if the value is zero.\nCompute the least common multiple of two <code>Uint</code>s or <code>None</code> if …\nSee <code>Uint::leading_ones</code> for documentation.\nReturns the number of leading ones in the binary …\nSee <code>Uint::leading_zeros</code> for documentation.\nReturns the number of leading zeros in the binary …\nReturns the logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nMask to apply to the highest limb to get the correct …\nReturns the most significant 64 bits of the number and the …\nCompute $\\mod{\\mathtt{self} ⋅ \\mathtt{rhs}}_…\nMontgomery multiplication.\nNumber of bytes required to represent the given number of …\nCalculates the smallest value greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nNumber of <code>u64</code> limbs required to represent the given number …\nCalculates $\\mod{\\mathtt{self} + \\mathtt{rhs}}_{2^{BITS}}$.\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nCalculates the multiplication of self and rhs.\nCalculates $\\mod{-\\mathtt{self}}_{2^{BITS}}$.\nRaises self to the power of <code>exp</code> and if the result would …\nSee <code>Uint::overflowing_shl</code> for documentation.\nLeft shift by <code>rhs</code> bits with overflow detection.\nSee <code>Uint::overflowing_shr</code> for documentation.\nRight shift by <code>rhs</code> bits with underflow detection.\nCalculates $\\mod{\\mathtt{self} - \\mathtt{rhs}}_{2^{BITS}}$.\nRaises self to the power of <code>exp</code>, wrapping around on …\nCompute $\\mod{\\mathtt{self}^{\\mathtt{rhs}}}_…\n⚠️ Compute $\\mod{\\mathtt{self}}_{\\mathtt{modulus}}$.\nSee <code>Uint::reverse_bits</code> for documentation.\nReverses the order of bits in the integer. The least …\nComputes the floor of the <code>degree</code>-th root of the number.\nSee <code>Uint::rotate_left</code> for documentation.\nShifts the bits to the left by a specified amount, <code>rhs</code>, …\nSee <code>Uint::rotate_right</code> for documentation.\nShifts the bits to the right by a specified amount, <code>rhs</code>, …\nComputes <code>self + rhs</code>, saturating at the numeric bounds …\nConstruct a new <code>Uint</code> from the value saturating the value …\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nComputes <code>self * rhs</code>, saturating at the numeric bounds …\nRaises self to the power of <code>exp</code>, saturating on overflow.\nSaturating left shift by <code>rhs</code> bits.\nComputes <code>self - rhs</code>, saturating at the numeric bounds …\nExamples\nSets a specific bit to a value.\nMontgomery squaring.\nSupport for external crates.\nPanics\nReturns an iterator over the base <code>base</code> digits of the …\nReturns an iterator over the base <code>base</code> digits of the …\nSee <code>Uint::to_be_bytes</code> for documentation.\nConverts the <code>Uint</code> to a big-endian byte array of size …\nConverts the <code>Uint</code> to a big-endian byte vector with leading …\nSee <code>Uint::to_be_bytes_vec</code> for documentation.\nConverts the <code>Uint</code> to a big-endian byte vector of size …\nSee <code>Uint::to_le_bytes</code> for documentation.\nConverts the <code>Uint</code> to a little-endian byte array of size …\nConverts the <code>Uint</code> to a little-endian byte vector with …\nConverts the <code>Uint</code> to a little-endian byte vector of size …\nSee <code>Uint::trailing_ones</code> for documentation.\nReturns the number of trailing ones in the binary …\nSee <code>Uint::trailing_zeros</code> for documentation.\nReturns the number of trailing zeros in the binary …\nSee <code>Uint::try_from_be_slice</code> for documentation.\nCreates a new integer from a big endian slice of bytes.\nSee <code>Uint::try_from_le_slice</code> for documentation.\nCreates a new integer from a little endian slice of bytes.\nCalculates the complete product <code>self * rhs</code> without the …\nComputes <code>self + rhs</code>, wrapping around at the boundary of …\nComputes <code>self / rhs</code> rounding down.\nConstruct a new <code>Uint</code> from the value saturating the value …\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nComputes <code>self * rhs</code>, wrapping around at the boundary of …\nComputes <code>-self</code>, wrapping around at the boundary of the …\nRaises self to the power of <code>exp</code>, wrapping around on …\nComputes <code>self % rhs</code>.\nSee <code>Uint::wrapping_shl</code> for documentation.\nLeft shift by <code>rhs</code> bits.\nSee <code>Uint::wrapping_shr</code> for documentation.\nRight shift by <code>rhs</code> bits.\nComputes <code>self - rhs</code>, wrapping around at the boundary of …\nExamples\n⚠️ Lehmer update matrix\n<code>lhs += rhs + carry</code>\nComputes <code>lhs += a</code> and returns the carry.\n⚠️ Computes <code>result += a * b</code> and checks for overflow.\nComputes wrapping <code>lhs += a * b</code> when all arguments are the …\nComputes <code>lhs += a * b</code> and returns the carry.\nApplies the matrix to a <code>Uint</code>.\nApplies the matrix to a <code>u128</code>.\nCompare two <code>u64</code> slices in reverse order.\nReturns the matrix product <code>self * other</code>.\n⚠️ Collection of division algorithms.\n⚠️ Division with remainder.\nReturns the argument unchanged.\nCompute a Lehmer update matrix from two <code>Uint</code>s.\nCompute the Lehmer update matrix in full 64 bit precision.\nCompute the Lehmer update matrix for small values.\nCompute the largest valid Lehmer update matrix for a …\n⚠️ Lehmer’s GCD algorithms.\n⚠️ Lehmer’s extended GCD.\nCalls <code>U::from(self)</code>.\n⚠️ Modular inversion using extended GCD.\nComputes <code>lhs *= a</code> and returns the carry.\nComputes a * b * 2^(-BITS) mod modulus\n<code>lhs -= rhs - borrow</code>\nComputes a^2 * 2^(-BITS) mod modulus\nComputes <code>lhs -= a * b</code> and returns the borrow.\n⚠️ Division with remainder.\n⚠️ Computes the quotient and remainder of a <code>u128</code> …\n⚠️ Computes the quotient and remainder of a <code>u128</code> …\n⚠️ Computes the quotient of a 192 bits divided by a …\n⚠️ Computes the quotient of a 192 bits divided by a …\nTODO: This implementation is off by one.\n⚠️ Compute single limb division.\n⚠️ Compute single limb normalized division.\n⚠️ Compute double limb division.\n⚠️ Compute double limb normalized division.\n⚠️ In-place Knuth long division with implicit …\n⚠️ In-place Knuth normalized long division with …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathtt{d}}} - …\n<code>Bits</code> for <code>0</code> bits.\n<code>Bits</code> for <code>1</code> bits.\n<code>Bits</code> for <code>1024</code> bits.\n<code>Bits</code> for <code>128</code> bits.\n<code>Bits</code> for <code>16</code> bits.\n<code>Bits</code> for <code>160</code> bits.\n<code>Bits</code> for <code>192</code> bits.\n<code>Bits</code> for <code>2048</code> bits.\n<code>Bits</code> for <code>256</code> bits.\n<code>Bits</code> for <code>32</code> bits.\n<code>Bits</code> for <code>320</code> bits.\n<code>Bits</code> for <code>384</code> bits.\n<code>Bits</code> for <code>4096</code> bits.\n<code>Bits</code> for <code>448</code> bits.\n<code>Bits</code> for <code>512</code> bits.\n<code>Bits</code> for <code>64</code> bits.\n<code>Bits</code> for <code>768</code> bits.\n<code>Bits</code> for <code>8</code> bits.\n<code>Uint</code> for <code>0</code> bits. Always zero. Similar to <code>()</code>.\n<code>Uint</code> for <code>1</code> bit. Similar to <code>bool</code>.\n<code>Uint</code> for <code>1024</code> bits.\n<code>Uint</code> for <code>128</code> bits. Similar to <code>u128</code>.\n<code>Uint</code> for <code>16</code> bits. Similar to <code>u16</code>.\n<code>Uint</code> for <code>160</code> bits.\n<code>Uint</code> for <code>192</code> bits.\n<code>Uint</code> for <code>2048</code> bits.\n<code>Uint</code> for <code>256</code> bits.\n<code>Uint</code> for <code>32</code> bits. Similar to <code>u32</code>.\n<code>Uint</code> for <code>320</code> bits.\n<code>Uint</code> for <code>384</code> bits.\n<code>Uint</code> for <code>4096</code> bits.\n<code>Uint</code> for <code>448</code> bits.\n<code>Uint</code> for <code>512</code> bits.\n<code>Uint</code> for <code>64</code> bits. Similar to <code>u64</code>.\n<code>Uint</code> for <code>768</code> bits.\n<code>Uint</code> for <code>8</code> bits. Similar to <code>u8</code>.\nDefault code address.\nWrapper around <code>DummyHost</code> that provides a stable …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault code address.\nWrapper around <code>DummyHost</code> that provides a stable …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")