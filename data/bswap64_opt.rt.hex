0x60806040526004361015610011575f80fd5b5f3560e01c63ff2f79f114610024575f80fd5b346100ed5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100ed5760043567ffffffffffffffff811681036100ed576100e990610073610139565b9067ff000000000000008160381b169066ff0000000000008160281b169065ff00000000008160181b169064ff000000008160081b169063ff0000008160081c169062ff00008160181c169060ff61ff008260281c169160381c161717171717171760c01b6020820152604051918291826100f1565b0390f35b5f80fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b604051906040820182811067ffffffffffffffff821117610164576040526008825260203681840137565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffdfea2646970667358221220b70b4e488cd362e10f6925a4da52a953b746633ef939bf96e967b5c6b5e600d364736f6c63430008190033

contract C {
    function to_little_endian_64(uint64 x) public pure returns (bytes memory ret) {
        uint64 swapped =
         (((x & 0xff00000000000000) >> 56)
        | ((x & 0x00ff000000000000) >> 40)
        | ((x & 0x0000ff0000000000) >> 24)
        | ((x & 0x000000ff00000000) >> 8)
        | ((x & 0x00000000ff000000) << 8)
        | ((x & 0x0000000000ff0000) << 24)
        | ((x & 0x000000000000ff00) << 40)
        | ((x & 0x00000000000000ff) << 56));

        ret = new bytes(8);
        assembly {
            mstore(add(ret, 0x20), shl(192, swapped))
        }
    }
}
