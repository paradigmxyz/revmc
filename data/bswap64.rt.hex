0x608060048036101561000f575f80fd5b5f3560e01c63ff2f79f114610022575f80fd5b346101de5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101de5780359167ffffffffffffffff9182841684036101de57604092828401908111838210176101b2578352600882527fffffffffffffffff0000000000000000000000000000000000000000000000006020830194602036873760c01b1690825115610186578160071a8553825160011015610186578160061a6021840153825160021015610186578160051a60228401538251600310156101865781811a60238401538251811015610186578160031a6024840153825160051015610186578160021a6025840153825160061015610186578160011a602684015382516007101561018657505f1a60278201537fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8351948593602085525180918160208701528686015e5f85828601015201168101030190f35b6032907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b6041827f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b5f80fdfea26469706673582212208f1d6d698d50560a1947599f8855b4bc10e155c6e665bd6833a8d1687852a17064736f6c63430008190033

contract C {
    function to_little_endian_64(uint64 value) public pure returns (bytes memory ret) {
        ret = new bytes(8);
        bytes8 bytesValue = bytes8(value);
        // Byteswapping during copying to bytes.
        ret[0] = bytesValue[7];
        ret[1] = bytesValue[6];
        ret[2] = bytesValue[5];
        ret[3] = bytesValue[4];
        ret[4] = bytesValue[3];
        ret[5] = bytesValue[2];
        ret[6] = bytesValue[1];
        ret[7] = bytesValue[0];
    }
}
